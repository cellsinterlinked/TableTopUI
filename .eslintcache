[{"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\index.js":"1","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\App.js":"2","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Pages\\Join.js":"3","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Pages\\Play.js":"4","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Modal\\Modal.js":"5","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Character.js":"6","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Modal\\NotificationModal.js":"7","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Modal\\ErrorModal.js":"8","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Navigation\\Exit.js":"9","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Reusable\\FrontDropDown.js":"10","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Navigation\\SideBar.js":"11","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Modal\\Help\\Help.js":"12","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Navigation\\BackDrop.js":"13","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\DiceLoad.js":"14","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Navigation\\SideDrawer.js":"15","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Navigation\\MapDrawer.js":"16","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Navigation\\PostDrawer.js":"17","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Navigation\\DiceDrawer.js":"18","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\InputBar.js":"19","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Messaging\\Messaging.js":"20","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Post\\Post.js":"21","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Maps\\WorldMap.js":"22","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Dice\\Dice.js":"23","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\NPC\\NPCDisplay.js":"24","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Combat\\PlayerCombat.js":"25","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Combat\\Combat.js":"26","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\DiceRoll.js":"27","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Messaging\\MessageDisplay.js":"28","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Reusable\\MessageDropDown.js":"29","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Messaging\\MessageInput.js":"30","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Messaging\\DropDowns.js":"31","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\NPC\\NPC.js":"32","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Combat\\PlayerInitiative.js":"33","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Combat\\MonsterCreator.js":"34","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Combat\\PlayerMovement.js":"35","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Messaging\\Message.js":"36","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Combat\\MonsterListItem.js":"37","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Reusable\\CustomDropdown.js":"38","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Reusable\\MonsterDropDown.js":"39","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Combat\\PlayerListItem.js":"40","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Reusable\\MonsterInputs.js":"41"},{"size":172,"mtime":1661363145116,"results":"42","hashOfConfig":"43"},{"size":355,"mtime":1661363145008,"results":"44","hashOfConfig":"43"},{"size":3606,"mtime":1661363145022,"results":"45","hashOfConfig":"43"},{"size":19692,"mtime":1669747759217,"results":"46","hashOfConfig":"43"},{"size":1204,"mtime":1661363145016,"results":"47","hashOfConfig":"43"},{"size":3972,"mtime":1669749514881,"results":"48","hashOfConfig":"43"},{"size":1313,"mtime":1661363145016,"results":"49","hashOfConfig":"43"},{"size":653,"mtime":1661363145015,"results":"50","hashOfConfig":"43"},{"size":505,"mtime":1661363145018,"results":"51","hashOfConfig":"43"},{"size":2904,"mtime":1661363145021,"results":"52","hashOfConfig":"43"},{"size":10394,"mtime":1661363145019,"results":"53","hashOfConfig":"43"},{"size":39132,"mtime":1661363145015,"results":"54","hashOfConfig":"43"},{"size":339,"mtime":1661363145017,"results":"55","hashOfConfig":"43"},{"size":337,"mtime":1661363145011,"results":"56","hashOfConfig":"43"},{"size":582,"mtime":1661363145019,"results":"57","hashOfConfig":"43"},{"size":575,"mtime":1661363145018,"results":"58","hashOfConfig":"43"},{"size":575,"mtime":1661363145018,"results":"59","hashOfConfig":"43"},{"size":575,"mtime":1661363145017,"results":"60","hashOfConfig":"43"},{"size":5788,"mtime":1661363145012,"results":"61","hashOfConfig":"43"},{"size":1305,"mtime":1661363145014,"results":"62","hashOfConfig":"43"},{"size":4374,"mtime":1661363145020,"results":"63","hashOfConfig":"43"},{"size":619,"mtime":1661363145012,"results":"64","hashOfConfig":"43"},{"size":509,"mtime":1661363145011,"results":"65","hashOfConfig":"43"},{"size":1913,"mtime":1661363145017,"results":"66","hashOfConfig":"43"},{"size":6832,"mtime":1661392252917,"results":"67","hashOfConfig":"43"},{"size":6459,"mtime":1661363145009,"results":"68","hashOfConfig":"43"},{"size":3822,"mtime":1661363145012,"results":"69","hashOfConfig":"43"},{"size":671,"mtime":1669751348774,"results":"70","hashOfConfig":"43"},{"size":2579,"mtime":1661363145021,"results":"71","hashOfConfig":"43"},{"size":1307,"mtime":1661363145014,"results":"72","hashOfConfig":"43"},{"size":2548,"mtime":1661363145013,"results":"73","hashOfConfig":"43"},{"size":2130,"mtime":1669751198802,"results":"74","hashOfConfig":"43"},{"size":5722,"mtime":1661369723515,"results":"75","hashOfConfig":"43"},{"size":10987,"mtime":1661363145009,"results":"76","hashOfConfig":"43"},{"size":1060,"mtime":1661363145011,"results":"77","hashOfConfig":"43"},{"size":1132,"mtime":1661363145013,"results":"78","hashOfConfig":"43"},{"size":1320,"mtime":1661363145009,"results":"79","hashOfConfig":"43"},{"size":2518,"mtime":1661363145020,"results":"80","hashOfConfig":"43"},{"size":3077,"mtime":1661363145021,"results":"81","hashOfConfig":"43"},{"size":1514,"mtime":1661363145010,"results":"82","hashOfConfig":"43"},{"size":1830,"mtime":1661363145021,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"v4cxr6",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"86"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"86"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"86"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"86"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"86"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"86"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"86"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"86"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"86"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"86"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"86"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"86"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\index.js",[],["183","184"],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\App.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Pages\\Join.js",["185","186","187"],"import React, { useState, useEffect } from  'react';\r\nimport { Link } from 'react-router-dom';\r\nimport ErrorModal from '../Components/Modal/ErrorModal'\r\nimport './Join.css';\r\nimport FrontDropdown from '../Components/Reusable/FrontDropDown';\r\nimport Modal from '../Components/Modal/Modal';\r\nimport {MdPhonelinkErase} from 'react-icons/md';\r\n\r\n\r\nconst Join = () => {\r\n  const [name, setName] = useState('');\r\n  const [room, setRoom] = useState('');\r\n  const [playerType, setPlayerType] = useState([{id:1, value: 'PLAYER'}])\r\n  const [showResolutionModal, setShowResolutionModal] = useState(false) ;\r\n\r\n  const items = [\r\n    {\r\n      id: 1,\r\n      value: 'PLAYER'\r\n    },\r\n    {\r\n      id: 2,\r\n      value: 'DM'\r\n    }\r\n  ]\r\n\r\n  useEffect(() => {\r\n    let res = window.screen.availWidth * window.devicePixelRatio \r\n    console.log(res)\r\n    if (res < 1700) {\r\n      setShowResolutionModal(true)\r\n    }\r\n  }, [])\r\n\r\n\r\n\r\n  const showState = () => {\r\n    console.log(playerType[0].value);\r\n  }\r\n  \r\n  const closeModal = () => {\r\n    setShowResolutionModal(false)\r\n  }\r\n\r\n  const applyType = (type) => {\r\n    setPlayerType(type)\r\n    \r\n  }\r\n  \r\n\r\n  return (\r\n    <>\r\n      <Modal \r\n      show={showResolutionModal === true} \r\n      children={\r\n      <div className='new-resolution-box'>\r\n      <p>This site's tools and user interface require more screen space than your device currently has! Please switch to a computer to enjoy all of Table Top Assistant's features. </p>\r\n        <MdPhonelinkErase className='no-phone'/>\r\n      </div>  \r\n        }\r\n      onCancel={closeModal}\r\n      header={<p>STOP!</p>}\r\n      footer={<button onClick={closeModal}>Got It!</button>}\r\n      />\r\n    {window.screen.availWidth * window.devicePixelRatio < 1700 && <div className='mobile-join'></div>}\r\n    {window.screen.availWidth * window.devicePixelRatio > 1700 && <div className=\"joinOuterContainer\">\r\n\r\n       <div className='joinInnerContainer'>\r\n        <h1 className=\"heading\">JOIN THE ADVENTURE</h1>\r\n        <div className=\"joinInputBox\"><input placeholder=\"Character Name...\" className=\"joinInput\" type=\"text\" value={name} onChange={(event) => setName(event.target.value)}></input></div>\r\n        <div className=\"joinInputBox\"><input placeholder=\"Room...\" className=\"joinInput\" type=\"text\" value={room} onChange={(event) => setRoom(event.target.value)}></input></div>\r\n        <FrontDropdown items={items} title={playerType[0].value} headingStyle=\"frontPage spaceTop\" setSingleState={setPlayerType} singleState={playerType}/>\r\n\r\n        <p className=\"dmInstructions\">If you are in the Dungeon Master role please choose a name for your room, the name your players will see you as and set the role to \"DM\"</p>\r\n        <p className=\"playerInstructions\">If you are in the Player role please give your character name, the name of the room your Dungeon Master chose, and make sure \"Player\" role is selected. </p>\r\n        {name && room && <Link className=\"button-link-box\"style={{textDecoration: \"none\", fontFamily: \"'Niconne', cursive\"}} onClick={e => (!name || !room) ? e.preventDefault() : null} to={`/play?name=${name}&room=${room}&role=${playerType[0].value}`}>\r\n          <button className=\"signInButton\" type=\"submit\">JOIN PARTY</button>\r\n        </Link>}\r\n\r\n        {(!name || !room) && \r\n        \r\n          <button className=\"signInButton_Inactive\" type=\"button\" onClick={() => {alert(\"Please input a character name and room to join\")}}>JOIN PARTY</button>\r\n        }\r\n       \r\n      </div>\r\n    </div>}\r\n</>\r\n  )\r\n}\r\n\r\nexport default Join;\r\n\r\n// to={`/play?name=${name}&room=${room}$role=${playerType[0].value}`}","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Pages\\Play.js",["188","189","190","191","192","193","194","195"],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Modal\\Modal.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Character.js",["196","197"],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Modal\\NotificationModal.js",["198"],"import React from 'react'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport Backdrop from '../Navigation/BackDrop'\r\nimport ReactDOM from 'react-dom';\r\nimport './NotificationModal.css'\r\n\r\nconst NotificationModalOverlay = (props) => {\r\n  const content = (\r\n    <div className=\"notification-modal\">\r\n      \r\n      <header className=\"notification-modalHeader\">\r\n        <h2>{props.header}</h2>\r\n      </header>\r\n      {/* <form\r\n        onSubmit={\r\n          props.onSubmit ? props.onSubmit : (event) => event.preventDefault()\r\n        }\r\n      > */}\r\n        <div className=\"notification-modalContent\">{props.children}</div>\r\n        <footer className=\"notification-modalFooter\">{props.footer}</footer>\r\n      {/* </form> */}\r\n    </div>\r\n  );\r\n  return ReactDOM.createPortal(content, document.getElementById('notification-hook'));\r\n  }\r\n\r\n  const NotificationModal = (props) => {\r\n    return (\r\n      <>\r\n        {/* {props.show && <Backdrop onClick={props.onCancel} />} */}\r\n        <CSSTransition\r\n          in={props.show}\r\n          mountOnEnter\r\n          unmountOnExit\r\n          timeout={200}\r\n          classNames=\"notification-modal\"\r\n        >\r\n          <NotificationModalOverlay {...props}  />\r\n        </CSSTransition>\r\n      </>\r\n    );\r\n  };\r\n  \r\n  export default NotificationModal;\r\n\r\n","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Modal\\ErrorModal.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Navigation\\Exit.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Reusable\\FrontDropDown.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Navigation\\SideBar.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Modal\\Help\\Help.js",["199"],"import React, { useState, useEffect } from 'react';\r\nimport './Help.css';\r\nimport { ImArrowRight } from 'react-icons/im';\r\n\r\nconst Help = ({ helpTopicHandler }) => {\r\n  const [helpState, setHelpState] = useState('Posting Character Stats');\r\n\r\n  useEffect(() => {\r\n    helpTopicHandler(helpState);\r\n  }, [helpState]);\r\n\r\n  return (\r\n    <div className=\"help-container\">\r\n      <div className=\"help-topic-wrapper\">\r\n        {helpState === 'Posting Character Stats' && (\r\n          <div className=\"character-help-wrapper\">\r\n            <div style={{ height: '12rem', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                While in a \"Player\" role, the first thing you will need to do is\r\n                click the character tab on the far right navigation bar. You\r\n                will not be able to be included in combat or display dice rolls\r\n                until this is done.{' '}\r\n              </p>\r\n            </div>\r\n            <div className=\"helpImage_wrapperS\">\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014266/Dungeons%20and%20Dragons/4603AB03-E6E2-47A7-8AB6-208D3AE2139A_4_5005_c_g8ea98.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '3rem',\r\n                  width: '3rem',\r\n                  top: '4.4rem',\r\n                  right: '0rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n            <ImArrowRight className=\"next_arrow\" />\r\n            <div style={{ height: '12rem', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                The tab will open to show your character sheet where you can\r\n                enter stats necessary for the Dungeon Master to see as well as a\r\n                place for a link to your character portrait\r\n              </p>\r\n            </div>\r\n\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '30rem', width: '20rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014267/Dungeons%20and%20Dragons/E8BEDDAA-6EB5-4BB0-B56A-73F1B6EBB140_asixlf.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '18rem',\r\n                  width: '10rem',\r\n                  top: '6.4rem',\r\n                  right: '2.5rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n            <ImArrowRight className=\"next_arrow\" />\r\n\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                Under the \"portrait url\" input you will paste a link to an image\r\n                of your character. You can right click any image on the web and\r\n                click \"copy image location\". Then just paste in the character\r\n                sheet \"Portrait\" input. If you have an image saved on social\r\n                media or any hosting website you can go there and use this same\r\n                method. A preview image will appear at the top of the character\r\n                sheet if the pasted link works. Click \"Update Stats\" to finalize\r\n                your changes.\r\n              </p>\r\n            </div>\r\n\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '30rem', width: '17rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014267/Dungeons%20and%20Dragons/162EB787-74FA-4E04-9D96-14ECC4860720_mxdlug.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '8rem',\r\n                  width: '11rem',\r\n                  top: '.8rem',\r\n                  right: '1.6rem',\r\n                }}\r\n              ></div>\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '2.8rem',\r\n                  width: '10rem',\r\n                  top: '21.9rem',\r\n                  right: '2.5rem',\r\n                }}\r\n              ></div>\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '2.2rem',\r\n                  width: '8rem',\r\n                  top: '26.3rem',\r\n                  right: '2.8rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {helpState === 'Navigation' && (\r\n          <div className=\"character-help-wrapper\">\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                If in the \"Player\" role, all navigation buttons will be\r\n                available upon entering the room besides the \"Combat\" button.\r\n                Once character stats and portrait are entered, all buttons will\r\n                be available. As the \"DM\" role, all will be available\r\n                immediately.\r\n              </p>\r\n            </div>\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ width: '30rem', height: '15rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642017836/Dungeons%20and%20Dragons/CEC55CB9-8BE8-4448-BEBA-06C0F594C0E3_1_105_c_qfbuhl.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '14.5rem',\r\n                  width: '1rem',\r\n                  top: '0rem',\r\n                  right: '0rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n            <ImArrowRight className=\"next_arrow\" />\r\n\r\n            <div className=\"nav-icon-tutorial-wrapper\">\r\n              <div className=\"icon-tutorial-box\">\r\n                <div className=\"icon-tutorial-image-wrapper\">\r\n                  <img\r\n                    alt=\"Messaging\"\r\n                    src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642017836/Dungeons%20and%20Dragons/B2DDD4CB-F579-4CB0-AF92-14425348D07D_4_5005_c_tndcgf.jpg\"\r\n                  />\r\n                </div>\r\n                <p>\r\n                  This leads to the messaging screen where you can privately\r\n                  message other players or the DM. This helps DM's provide\r\n                  information to characters only they would know.\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"icon-tutorial-box\">\r\n                <div className=\"icon-tutorial-image-wrapper\">\r\n                  <img\r\n                    alt=\"Messaging\"\r\n                    src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642017836/Dungeons%20and%20Dragons/A5B04551-C709-4D72-B201-5FD13E84322E_4_5005_c_ylnpgg.jpg\"\r\n                  />\r\n                </div>\r\n                <p>\r\n                  This leads to where the current world map is displayed, as\r\n                  provided by the Dungeon Master.\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"icon-tutorial-box\">\r\n                <div className=\"icon-tutorial-image-wrapper\">\r\n                  <img\r\n                    alt=\"Messaging\"\r\n                    src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642017836/Dungeons%20and%20Dragons/6E77E9F7-4FC3-42CD-8122-17F6F4BE48A4_4_5005_c_oiwykr.jpg\"\r\n                  />\r\n                </div>\r\n                <p>\r\n                  This tab leads to the current combat map provided by the\r\n                  Dungeon Master. More can be learned about combat my clicking\r\n                  the \"COMBAT\" button on bottom of this help screen.\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"icon-tutorial-box\">\r\n                <div className=\"icon-tutorial-image-wrapper\">\r\n                  <img\r\n                    alt=\"Messaging\"\r\n                    src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642017836/Dungeons%20and%20Dragons/9E8A8F20-5A8D-417B-A45B-942E7090E181_4_5005_c_gszy5t.jpg\"\r\n                  />\r\n                </div>\r\n                <p>\r\n                  This tab is where information about NPCs of the game is\r\n                  listed. Learn more about NPCs by clicking the \"NPC\" button on\r\n                  the bottom of this help screen.\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"icon-tutorial-box\">\r\n                <div className=\"icon-tutorial-image-wrapper\">\r\n                  <img\r\n                    alt=\"Messaging\"\r\n                    src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642017836/Dungeons%20and%20Dragons/1B3FA5B3-083E-459D-9A94-DC5AA03EC9CD_4_5005_c_hiuha7.jpg\"\r\n                  />\r\n                </div>\r\n                <p>\r\n                  This is the tab where Players and Dungeon Master will both\r\n                  make out of combat dice rolls. To learn more about dice rolls\r\n                  click the \"DICE\" button at the bottom of this help screen.\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"icon-tutorial-box\">\r\n                <div className=\"icon-tutorial-image-wrapper\">\r\n                  <img\r\n                    alt=\"Messaging\"\r\n                    src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642017836/Dungeons%20and%20Dragons/72B0FBB8-3DB1-4C67-9670-C0D512DE1B3D_4_5005_c_vkxphf.jpg\"\r\n                  />\r\n                </div>\r\n                <p>\r\n                  This is where players will go to update their character stats\r\n                  and portrait. This tab is not available for the Dungeon\r\n                  Master. To learn more about posting stats click the \"POSTING\r\n                  CHARACTER STATS\" button at the bottom of this help screen.\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"icon-tutorial-box\">\r\n                <div className=\"icon-tutorial-image-wrapper\">\r\n                  <img\r\n                    alt=\"Messaging\"\r\n                    src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642017836/Dungeons%20and%20Dragons/F2414393-794E-471B-AFB1-4E5402AB8239_4_5005_c_x1xkoz.jpg\"\r\n                  />\r\n                </div>\r\n                <p>\r\n                  This is where the Dungeon Master will post maps and NPCs. This\r\n                  tab is not available for Players. to learn more click the\r\n                  \"POSTING MAPS BUTTON\" at the bottom of this help screen.{' '}\r\n                </p>\r\n              </div>\r\n\r\n              <div className=\"icon-tutorial-box\">\r\n                <div className=\"icon-tutorial-image-wrapper\">\r\n                  <img\r\n                    alt=\"Messaging\"\r\n                    src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642017836/Dungeons%20and%20Dragons/1FFE4EDD-83CD-459D-B9A6-BF8C0C10DE0A_4_5005_c_dlt5a0.jpg\"\r\n                  />\r\n                </div>\r\n                <p>This tab leads to the help screen you are on currently.</p>\r\n              </div>\r\n\r\n              <div className=\"icon-tutorial-box\">\r\n                <div className=\"icon-tutorial-image-wrapper\">\r\n                  <img\r\n                    alt=\"Messaging\"\r\n                    src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642017836/Dungeons%20and%20Dragons/0BCDBFAD-FB01-4009-94CB-C601027C5327_4_5005_c_j3gpx4.jpg\"\r\n                  />\r\n                </div>\r\n                <p>\r\n                  This tab will give you the option to log out and leave the\r\n                  game.{' '}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {helpState === 'Dice Rolls' && (\r\n          <div className=\"character-help-wrapper\">\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                Dice rolls can be made under the dice tab on the right hand side\r\n                of the screen. You first choose which kind of dice to roll\r\n                (d4-d20) and then how many of those dice (up to 6). Each\r\n                individual dice as well as the total will be displayed. If your\r\n                are in the \"Player\" roll this will also be displayed on your\r\n                character sheet.\r\n              </p>\r\n            </div>\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '20rem', width: '28rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014267/Dungeons%20and%20Dragons/5E2BFB96-AA92-412B-BB2F-31DF264430FA_1_105_c_eaqhjp.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '2.8rem',\r\n                  width: '10rem',\r\n                  top: '9.4rem',\r\n                  right: '.5rem',\r\n                }}\r\n              ></div>\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '4.2rem',\r\n                  width: '8rem',\r\n                  top: '15.3rem',\r\n                  right: '1.4rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n            <ImArrowRight className=\"next_arrow\" />\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                As a \"Player\" or \"Dungeon Master\" role, you can make combat\r\n                rolls from within the combat screen the exact same way.\r\n              </p>\r\n            </div>\r\n\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '100%', width: '17rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642021348/Dungeons%20and%20Dragons/2A42E32A-F3D0-4BD4-BA07-1335BF44B79A_pcbbbq.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '15.2rem',\r\n                  width: '13rem',\r\n                  top: '19.3rem',\r\n                  right: '2.5rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n            <ImArrowRight className=\"next_arrow\" />\r\n\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                So the battle tab doesn't have to be constantly toggled, all\r\n                Player rolls are displayed on the far left hand side of the\r\n                battle screen under their respective character portrait.\r\n              </p>\r\n            </div>\r\n\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '100%', width: '16rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014267/Dungeons%20and%20Dragons/14840E36-DA6C-4F9A-A7FF-BD677F816CBD_4_5005_c_mxrkwg.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '1.6rem',\r\n                  width: '4.5rem',\r\n                  top: '15.2rem',\r\n                  left: '0rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {helpState === 'Messaging' && (\r\n          <div className=\"character-help-wrapper\">\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                Messages can be sent between any number of players and the\r\n                Dungeon Master. These messages are private and will only be sent\r\n                to the recipients you select. When you recieve a new message you\r\n                will have a red notification appear on the messages tab.\r\n              </p>\r\n            </div>\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '100%', width: '26rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014267/Dungeons%20and%20Dragons/73E71094-3A79-41C3-AAF2-57B781F69920_ey7yuc.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '4.3rem',\r\n                  width: '12rem',\r\n                  top: '5.4rem',\r\n                  right: '1.8rem',\r\n                }}\r\n              ></div>\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '1.7rem',\r\n                  width: '1.8rem',\r\n                  top: '.6rem',\r\n                  right: '0rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n            <ImArrowRight className=\"next_arrow\" />\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                Before you can send a message you must select which players (or\r\n                Dungeon Master) the message will be sending to. Any number of\r\n                recipients may be selected.\r\n              </p>\r\n            </div>\r\n\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '100%', width: '20rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014267/Dungeons%20and%20Dragons/1A1B656A-968E-4AA2-B6BD-93E191BE9B16_xoafet.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '10.3rem',\r\n                  width: '12rem',\r\n                  top: '0rem',\r\n                  right: '1.8rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {helpState === 'Player Combat' && (\r\n          <div className=\"character-help-wrapper\">\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                The combat screen shows the current combat map, and lets the\r\n                players and Dungeon Master move icons of their characters around\r\n                on it. It also provides an area for dice rolls, toggling the\r\n                size of your miniature on the map, as well as dice roll\r\n                displays.\r\n              </p>\r\n            </div>\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '100%', width: '16rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642021348/Dungeons%20and%20Dragons/2A42E32A-F3D0-4BD4-BA07-1335BF44B79A_pcbbbq.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '15.2rem',\r\n                  width: '12rem',\r\n                  bottom: '0rem',\r\n                  right: '2.4rem',\r\n                }}\r\n              ></div>\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '2.2rem',\r\n                  width: '12rem',\r\n                  bottom: '15.3rem',\r\n                  right: '2.4rem',\r\n                }}\r\n              ></div>\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '2.2rem',\r\n                  width: '12rem',\r\n                  bottom: '20.5rem',\r\n                  right: '2.4rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n            <ImArrowRight className=\"next_arrow\" />\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                Your character icon will start out on the top left of the battle\r\n                map at the beginning of a fight. To move it, just drag and drop\r\n                the icon to the location where you want to move. You MUST click\r\n                \"Confirm Movement\" after moving your icon or toggling its size\r\n                (between small medium and large) for the effects to be permanent\r\n                and obervable by the rest of the players.\r\n              </p>\r\n            </div>\r\n\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '20rem', width: '30rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014268/Dungeons%20and%20Dragons/93140461-38DA-4BDF-9499-ACFA9F8D8BFC_1_105_c_zgofyq.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '1rem',\r\n                  width: '1rem',\r\n                  top: '4.8rem',\r\n                  right: '24.2em',\r\n                }}\r\n              ></div>\r\n            </div>\r\n            <ImArrowRight className=\"next_arrow\" />\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                Each player's dice rolls will be displayed under their\r\n                respective character portrait on the far left hand side of the\r\n                battle map. These icons can be dragged and dropped into order of\r\n                initiative to keep combat smooth and quick.\r\n              </p>\r\n            </div>\r\n\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '100%', width: '15rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014267/Dungeons%20and%20Dragons/14840E36-DA6C-4F9A-A7FF-BD677F816CBD_4_5005_c_mxrkwg.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '8.3rem',\r\n                  width: '4rem',\r\n                  top: '8.3rem',\r\n                  left: '0rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {helpState === 'Posting Maps/NPCs' && (\r\n          <div className=\"character-help-wrapper\">\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                If playing the Dungeon Master, you should keep the game\r\n                organized and easier to imagine by providing world maps, combat\r\n                grids and npc portraits for your players when you can. This\r\n                screen is accessable by clicking the \"Post Info\" icon on the far\r\n                right side of the screen.\r\n              </p>\r\n            </div>\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '16rem', width: '21rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014267/Dungeons%20and%20Dragons/1D8059F5-B8F3-4B79-BF13-BBB9BCF4A42D_v36dag.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '8rem',\r\n                  width: '8.3rem',\r\n                  top: '0rem',\r\n                  right: '11.6rem',\r\n                }}\r\n              ></div>\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '8rem',\r\n                  width: '8.8rem',\r\n                  top: '0rem',\r\n                  right: '2rem',\r\n                }}\r\n              ></div>\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '1.5rem',\r\n                  width: '1.5rem',\r\n                  top: '14rem',\r\n                  right: '0rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n            <ImArrowRight className=\"next_arrow\" />\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                Right click any map online and click \"copy image location\" to\r\n                get the link for your map. If you have custom maps of your own\r\n                you can still do this by posting them on social media or a host\r\n                of some kind and follow the same procedure. Click \"Set Map\" or\r\n                \"Set Combat Map\" to make these maps available to players.\r\n              </p>\r\n            </div>\r\n\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '20rem', width: '15rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014267/Dungeons%20and%20Dragons/00540FC4-4444-4A0C-ADB2-EBC3B84CF15D_hbza7c.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '2.5rem',\r\n                  width: '10rem',\r\n                  top: '0rem',\r\n                  right: '3.5rem',\r\n                }}\r\n              ></div>\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '2.5rem',\r\n                  width: '10rem',\r\n                  top: '6rem',\r\n                  right: '3.5rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n            <ImArrowRight className=\"next_arrow\" />\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                To post an NPC use the same copy image location method as with\r\n                the maps. Also give the NPC a name before clicking \"Create NPC\"\r\n                to make it available to the players. If your posts were\r\n                successful you should have a notification at the top of the\r\n                screen.\r\n              </p>\r\n            </div>\r\n\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '16rem', width: '20rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014266/Dungeons%20and%20Dragons/B19E13FE-F93C-45D0-BA45-2167A776F393_vwdtpj.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '9rem',\r\n                  width: '9.5rem',\r\n                  top: '2rem',\r\n                  left: '0rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {helpState === 'NPC' && (\r\n          <div className=\"character-help-wrapper\">\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                To access NPCs the Dungeon Master has posted click the NPCs tab\r\n                on the far right hand side of the screen. Each NPC will be\r\n                individually listed with several options. The Dungeon Master OR\r\n                Players may write notes about the NPC by hitting the \"Notes\"\r\n                button and entering their note in the input box. Do finalize\r\n                your note click \"Post Note\". The Dungeon Master also has a\r\n                delete option to get rid of that NPC. To scroll right or left\r\n                through NPC's click the arrows to the sides of the display.\r\n              </p>\r\n            </div>\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '100%', width: '68rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014267/Dungeons%20and%20Dragons/9FAB1F42-E838-4D93-9CEE-7A665D2F954C_1_105_c_juzp1g.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '2.5rem',\r\n                  width: '2.5rem',\r\n                  top: '9.4rem',\r\n                  right: '0rem',\r\n                }}\r\n              ></div>\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '4.5rem',\r\n                  width: '4.5rem',\r\n                  top: '15rem',\r\n                  right: '14rem',\r\n                }}\r\n              ></div>\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '4.5rem',\r\n                  width: '4.5rem',\r\n                  top: '15rem',\r\n                  left: '.2rem',\r\n                }}\r\n              ></div>\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '3rem',\r\n                  width: '10.5rem',\r\n                  top: '23.7rem',\r\n                  left: '21.7rem',\r\n                }}\r\n              ></div>\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '6rem',\r\n                  width: '13.5rem',\r\n                  top: '18.7rem',\r\n                  left: '35.5rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {helpState === 'DM Combat' && (\r\n          <div\r\n            className=\"character-help-wrapper\"\r\n            style={{ overflow: 'scroll', flexWrap: 'wrap' }}\r\n          >\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                Combat for the Dungeon Master has a few more steps. First you\r\n                must post a battle map under the \"Post Info\" tab. This map\r\n                should have a grid as to keep track of exact character and\r\n                creature positions. Next, under the battle tab click the \"Unit\r\n                Count\" dropdown and click how many creatures you want to put\r\n                onto the map.\r\n              </p>\r\n            </div>\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '30rem', width: '21rem', marginBottom: '2rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014268/Dungeons%20and%20Dragons/A4FCF78D-FA63-4DB7-B4A0-6970762E3594_fntli0.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '3.2rem',\r\n                  width: '20rem',\r\n                  top: '0rem',\r\n                  right: '.3rem',\r\n                }}\r\n              ></div>\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '3.2rem',\r\n                  width: '20rem',\r\n                  top: '14rem',\r\n                  right: '.3rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n\r\n            <ImArrowRight className=\"next_arrow\" />\r\n\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                Once you have a number of creatures, a second dropdown called\r\n                \"Monster Icons\" will appear under the \"Unit Count\" dropdown.\r\n                Here you will select the size of the monster (small medium or\r\n                large) which will be reliant on how large the grid of your\r\n                battle map is. Here you will also paste a link to an image of\r\n                the monster. Right click any image on the web and select \"copy\r\n                image loacation\" to get this link. Once all creatures have a set\r\n                size and portrait click \"Create My Minions!\".\r\n              </p>\r\n            </div>\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '30rem', width: '21rem', marginBottom: '2rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014268/Dungeons%20and%20Dragons/B0535298-22FB-47D8-AC4A-313BD992B7B2_z6d4cq.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '13.2rem',\r\n                  width: '15rem',\r\n                  top: '4rem',\r\n                  right: '1.8rem',\r\n                }}\r\n              ></div>\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '3rem',\r\n                  width: '15rem',\r\n                  top: '23rem',\r\n                  right: '1.8rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n            <ImArrowRight className=\"next_arrow\" />\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                Once your creatures are created their map icons will all start\r\n                out on the top left of the screen. Drag and drop a monster's icon to place it on a new location on the map.  The movement of all of these creatures are not final until you\r\n                have hit the \"Confirm Movement Button on the far right hand of\r\n                the screen under your list of creatures. This will make the updated locations obervable by other players. \"\r\n              </p>\r\n            </div>\r\n\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '30rem', width: '21rem', marginBottom: '2rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1643253259/Dungeons%20and%20Dragons/DFE94E6F-88F7-40A5-8C42-63D28DBB2839_njlkcr.jpg\"\r\n                alt=\"\"\r\n              />\r\n              {/* <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '3rem',\r\n                  width: '15.5rem',\r\n                  top: '6.3rem',\r\n                  right: '2.8rem',\r\n                }}\r\n              ></div> */}\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '3.5rem',\r\n                  width: '17.5rem',\r\n                  top: '17.4rem',\r\n                  right: '2.8rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n            <ImArrowRight className=\"next_arrow\" />\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                The movement of all of these creatures are not final until you\r\n                have hit the \"Confirm Movement Button on the far right hand of\r\n                the screen under your list of creatures. This will make the updated locations obervable by other players. \"\r\n              </p>\r\n            </div>\r\n\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '30rem', width: '40rem', marginBottom: '2rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014268/Dungeons%20and%20Dragons/CF3EB83F-2395-416C-8162-978D89DA4388_4_5005_c_v2xumx.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '3rem',\r\n                  width: '3.5rem',\r\n                  top: '16.9rem',\r\n                  right: '3.4rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n\r\n            <ImArrowRight className=\"next_arrow\" />\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                By clicking the red box next to a monster, that monster's icon\r\n                will change to a skull, showing the players it has been\r\n                defeated. You MUST click confirm movement after doing this for\r\n                it to display to other players.\r\n              </p>\r\n            </div>\r\n\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '20rem', width: '20rem', marginBottom: '2rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014268/Dungeons%20and%20Dragons/FD56FC09-022B-49D0-959F-D26A6A20EAAA_4_5005_c_omha6t.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '4.3rem',\r\n                  width: '4.3rem',\r\n                  top: '4.3rem',\r\n                  right: '7.3rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n\r\n            <ImArrowRight className=\"next_arrow\" />\r\n            <div style={{ height: 'auto', width: '12rem' }}>\r\n              <p className=\"help-text-tutorial\">\r\n                To keep track of turn order, the player portraits on the left\r\n                hand side can be dragged and dropped into any order that you\r\n                please. These portraits also display the player dice rolls for\r\n                easy access.\r\n              </p>\r\n            </div>\r\n\r\n            <div\r\n              className=\"helpImage_wrapperS\"\r\n              style={{ height: '30rem', width: '15rem', marginBottom: '2rem' }}\r\n            >\r\n              <img\r\n                src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1642014267/Dungeons%20and%20Dragons/14840E36-DA6C-4F9A-A7FF-BD677F816CBD_4_5005_c_mxrkwg.jpg\"\r\n                alt=\"\"\r\n              />\r\n              <div\r\n                className=\"help-highlight\"\r\n                style={{\r\n                  height: '7.7rem',\r\n                  width: '4.3rem',\r\n                  top: '6.6rem',\r\n                  left: '0rem',\r\n                }}\r\n              ></div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"help-footer\">\r\n        <p onClick={() => setHelpState('Posting Character Stats')}>\r\n          POSTING CHARACTER STATS\r\n        </p>\r\n        <p onClick={() => setHelpState('Navigation')}>NAVIGATION</p>\r\n        <p onClick={() => setHelpState('Dice Rolls')}>DICE</p>\r\n        <p onClick={() => setHelpState('Messaging')}>MESSAGING</p>\r\n        <p onClick={() => setHelpState('Player Combat')}>PLAYER COMBAT</p>\r\n        <p onClick={() => setHelpState('DM Combat')}>DM COMBAT</p>\r\n        <p onClick={() => setHelpState('Posting Maps/NPCs')}>\r\n          POSTING MAPS/NPCS\r\n        </p>\r\n        <p onClick={() => setHelpState('NPC')}>NPC</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Help;\r\n","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Navigation\\BackDrop.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\DiceLoad.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Navigation\\SideDrawer.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Navigation\\MapDrawer.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Navigation\\PostDrawer.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Navigation\\DiceDrawer.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\InputBar.js",["200","201","202","203","204"],"import React, { useState, useEffect } from 'react';\r\nimport Dice from '../Resources/toppng.com-emini-polyhedral-black-green-gold-x7-green-black-rpg-dice-436x397.png';\r\nimport DiceRoll from './DiceRoll';\r\nimport './InputBar.css';\r\n\r\nconst InputBar = ({stats, setStats, name, sendPlayerData, sendPlayerRoll }) => {\r\n\r\n  const [playerIconPreview, setPlayerIconPreview] = useState(\"\")\r\n  const [correctName, setCorrectName] = useState(\"\")\r\n  \r\n  useEffect(() => {\r\n    setCorrectName(newName())\r\n  })\r\n  // const  setDiceRoll = async (roll) => {\r\n  //   await setStats({...stats, dice: roll})\r\n  //   // sendPlayerData()\r\n  // }\r\n  const newName = () => {\r\n    let arr = name.split(\" \")\r\n    let newArr = []\r\n    for (let i=0; i<arr.length; i++){\r\n      newArr.push (arr[i].charAt(0).toUpperCase() + arr[i].slice(1));\r\n    }\r\n    return newArr.join(\" \");\r\n    \r\n  }\r\n  \r\n\r\n\r\n  return (\r\n  <form className=\"inputBarContainer\" onSubmit={sendPlayerData}>\r\n\r\n    <div className=\"charBox3\">\r\n      {stats.portrait && <img src={stats.portrait} alt=\"Portrait\"></img>}\r\n      {!stats.portrait && <p>INPUT URL OF CHARACTER PORTRAIT DOWN BELOW</p>}\r\n\r\n    </div>\r\n\r\n    <div className=\"charBox1\">\r\n\r\n    <div className=\"input-character-name\">\r\n      <h1>{correctName}</h1>\r\n    </div>\r\n\r\n    <div className=\"charInputDiv\">\r\n      <p>Hit Points</p>\r\n      <div class=\"plus-box-holder\">\r\n        {/* <p className=\"plus\">+</p> */}\r\n    <input \r\n    className=\"charInput\"\r\n    value={stats.hp}\r\n    onChange={(event) => setStats({...stats, hp: event.target.value})}\r\n    // value={props.playerData}\r\n    // onChange={(event) => props.setPlayerData(event.target.value)}\r\n    // onKeyPress={event => event.key === 'Enter' ? props.sendPlayerData(event) : null}\r\n    >\r\n    </input>\r\n\r\n      </div>\r\n    </div>\r\n\r\n\r\n    <div className=\"charInputDiv\">\r\n      <p>Armor Class</p>\r\n      <div className=\"plus-box-holder\">\r\n      {/* <p className=\"plus\">+</p> */}\r\n      <input className=\"charInput\"\r\n        value={stats.ac}\r\n        onChange={(event) => setStats({...stats, ac: event.target.value})}\r\n      >\r\n      </input>\r\n\r\n      </div>\r\n      {/* <button onClick={() => console.log(stats)}>ShowState</button> */}\r\n    </div>\r\n\r\n    <div className=\"charInputDiv\">\r\n      <p>Melee Bonus</p>\r\n      <div className=\"plus-box-holder\">\r\n      <p className=\"plus\">+</p>\r\n      <input className=\"charInput\"\r\n      value={stats.melee}\r\n      onChange={(event) => setStats({...stats, melee: event.target.value})}\r\n      ></input>\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"charInputDiv\">\r\n      <p>Ranged Bonus</p>\r\n      <div className=\"plus-box-holder\">\r\n      <p className=\"plus\">+</p>\r\n      <input className=\"charInput\"\r\n      value={stats.ranged}\r\n      onChange={(event) => setStats({...stats, ranged: event.target.value})}\r\n      ></input>\r\n      </div>\r\n    </div>\r\n\r\n    \r\n    {/* </div>\r\n\r\n  <div className=\"charBox2\"> */}\r\n\r\n    <div className=\"charInputDiv\">\r\n      <p>Strength Save</p>\r\n      <div className=\"plus-box-holder\">\r\n      <p className=\"plus\">+</p>\r\n      <input className=\"charInput\"\r\n      value={stats.str}\r\n      onChange={(event) => setStats({...stats, str: event.target.value})}\r\n      ></input>\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"charInputDiv\">\r\n      <p>Dexterity Save</p>\r\n      <div className=\"plus-box-holder\">\r\n      <p className=\"plus\">+</p>\r\n      <input className=\"charInput\"\r\n      value={stats.dex}\r\n      onChange={(event) => setStats({...stats, dex: event.target.value})}\r\n      ></input>\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"charInputDiv\">\r\n      <p>Constitution Save</p>\r\n      <div className=\"plus-box-holder\">\r\n      <p className=\"plus\">+</p>\r\n      <input className=\"charInput\"\r\n      value={stats.con}\r\n      onChange={(event) => setStats({...stats, con: event.target.value})}\r\n      ></input>\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"charInputDiv\">\r\n      <p>Intelligence save</p>\r\n      <div className=\"plus-box-holder\">\r\n      <p className=\"plus\">+</p>\r\n      <input className=\"charInput\"\r\n      value={stats.int}\r\n      onChange={(event) => setStats({...stats, int: event.target.value})}\r\n      ></input>\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"charInputDiv\">\r\n      <p>Wisdom Save</p>\r\n      <div className=\"plus-box-holder\">\r\n      <p className=\"plus\">+</p>\r\n      <input className=\"charInput\"\r\n      value={stats.wis}\r\n      onChange={(event) => setStats({...stats, wis: event.target.value})}\r\n      ></input>\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"charInputDiv\">\r\n      <p>Charisma Save</p>\r\n      <div className=\"plus-box-holder\">\r\n      <p className=\"plus\">+</p>\r\n      <input className=\"charInput\"\r\n      value={stats.cha}\r\n      onChange={(event) => setStats({...stats, cha: event.target.value})}\r\n      ></input>\r\n      </div>\r\n    </div>\r\n\r\n    <div className=\"charInputDiv_image\">\r\n      <p style={{color: \"black\", fontWeight: \"bold\"}}>Portrait URL</p>\r\n      <input className=\"charInput_image\"\r\n      value={stats.portrait}\r\n      onChange={(event) => setStats({...stats, portrait: event.target.value})}>\r\n        \r\n      </input>\r\n      <p className=\"portrait-explanation\">Right click any image from the web and paste it in this box for your character portrait</p>\r\n    </div>\r\n\r\n\r\n    <div className=\"submit-stats-container\">\r\n      <button className=\"submit-stats\" type=\"button\" onClick={sendPlayerData} >Update Stats</button>\r\n    </div>\r\n  </div>\r\n\r\n\r\n    {/* <div className=\"charBox4\">\r\n      <img id=\"diceImage\" src={Dice} alt=\"dice\"></img>\r\n\r\n    </div>\r\n\r\n\r\n    <DiceRoll sendPlayerRoll={sendPlayerRoll} setStats={setStats} sendPlayerData={sendPlayerData}/>\r\n  <button className='sendButton' type='submit'>Set Stats</button> */}\r\n  </form>\r\n\r\n  \r\n  )\r\n  \r\n}\r\n\r\nexport default InputBar","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Messaging\\Messaging.js",["205","206","207"],"import React, {useState, useEffect} from 'react';\r\nimport './Messaging.css';\r\nimport MessageDisplay from './MessageDisplay';\r\nimport DropDowns from './DropDowns';\r\nimport MessageInput from './MessageInput';\r\nimport MessageDropdown from '../Reusable/MessageDropDown';\r\n\r\n\r\n\r\n\r\nconst Messaging = ({setMessage, sendPlayerMessage, message, setRecipients, users, recipients, messages, name, unreadMessages, setUnreadMessages, partyData}) => {\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      setRecipients([name])\r\n      // console.log(recipients)\r\n    }\r\n  },[setRecipients, name])\r\n\r\n  useEffect(() => {\r\n    setUnreadMessages(0)\r\n  }, [])\r\n\r\n  //this clears the recipients when they close the drawer (unmount) otherwise it will cause all kinds of issues \r\n  \r\n\r\n\r\n  return(\r\n    <div className=\"messaging-container\">\r\n    <DropDowns users={users} setRecipients={setRecipients} recipients={recipients} name={name} partyData={partyData}/>\r\n    {/* <MessageDropdown items={users} name={name} singleState={recipients} setSingleState={setRecipients} title=\"CHOOSE RECIPIENTS\"/> */}\r\n    <MessageDisplay messages={messages} name={name}/>\r\n    <MessageInput setMessage={setMessage} sendPlayerMessage={sendPlayerMessage} message={message} recipients={recipients}/>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Messaging","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Post\\Post.js",["208"],"import React, {useState} from 'react'\r\nimport './Post.css';\r\n\r\nconst Post = (props) => {\r\n  const [tempWorld, setTempWorld] = useState(\"\")\r\n  const [tempChar, setTempChar] = useState({portrait: \"\", name: \"\"})\r\n  const [tempCombatMap, setTempCombatMap] = useState('')\r\n  // const [tempCharName, setTempCharName] = useState(null)\r\n\r\n  // NEXT THING TO DO build out tempCombatMap and use setCombatMap from props to send\r\n  \r\n\r\n  const newMapHandler = () => {\r\n    if(tempWorld !== \"\") {props.sendMapData(tempWorld)\r\n      props.showNotification('Map Was Posted!')\r\n      console.log(\"should be firing\")\r\n    }\r\n    setTempWorld(\"\");\r\n    document.getElementById(\"mapInput\").value = \"\"\r\n    console.log(`new map handler is working ${tempWorld} is map`)\r\n  }\r\n\r\n  const newNPCHandler = () => {\r\n    if(tempChar.name && tempChar.portrait !== \"\") {props.sendNPCData(tempChar)\r\n      props.showNotification('New NPC Was Added!')\r\n      console.log(\"should be firing\")\r\n    }\r\n    setTempChar({portrait: \"\", name: \"\"})\r\n    document.getElementById(\"portrait-input\").value = \"\"\r\n    document.getElementById(\"npc-name-input\").value = \"\"\r\n  }\r\n\r\n  const newCombatHandler = () => {\r\n    if(tempCombatMap !== '') {props.sendCombatMap(tempCombatMap)\r\n      props.showNotification('Combat Map Was Added!')\r\n      console.log(\"should be firing\")\r\n    \r\n    }\r\n    setTempCombatMap('')\r\n    document.getElementById('battle-map-input').value = \"\"\r\n  }\r\n\r\n  const checkState = () => {\r\n    console.log(tempChar)\r\n  }\r\n\r\n  return(\r\n    <div className=\"postContainer\">\r\n      <div className=\"worldContainer\">\r\n      <h1>POST A MAP</h1>\r\n      <input id=\"mapInput\" placeholder=\"Map URL\" className=\"mapInput\" type=\"text\" value={tempWorld} onChange={(event) => setTempWorld(event.target.value)}></input>\r\n      <p className=\"postDescription\">Right click any image from the web and click \"copy image location\", then paste the link above. Once submitted this will be the current world map for your adventure and will be displayed in the \"Maps\" tab </p>\r\n      <div className=\"worldButtonContainer\"><button className=\"worldSubmitButton\" onClick={newMapHandler}>SET MAP</button></div>\r\n      {tempWorld && <div className=\"mapPrev\"><img src={tempWorld} alt=\"\" /></div>}\r\n      </div>\r\n\r\n      <div className=\"portraitContainer\">\r\n        <h1>POST AN NPC</h1>\r\n        <input id=\"portrait-input\" placeholder=\"Portrait URL\" className=\"portraitInput\" type=\"text\" value={tempChar.portrait} onChange={(event) => setTempChar({...tempChar, portrait: event.target.value})}></input>\r\n        <input id=\"npc-name-input\" placeholder=\"Name\" className=\"portraitInput\" type=\"text\" value={tempChar.name} onChange={(event) => setTempChar({...tempChar, name:event.target.value})}></input>\r\n        <p className=\"postDescription\">Right click any image from the web and click \"copy image location\", then paste the link above. This will be the current portrait for your new NPC. Second, give them a name. Once submitted you will find your NPC under the \"NPC\" tab. </p>\r\n        <div className=\"portraitButtonContainer\"><button className=\"portraitSubmitButton\" onClick={newNPCHandler}>CREATE NPC</button></div>\r\n        {/* <div className=\"portraitButtonContainer\"><button className=\"portraitSubmitButton\" onClick={checkState}>Check state</button></div> */}\r\n        {tempChar && <div className=\"portraitPreview\"><img src={tempChar.portrait} alt=\"\" /></div>}\r\n        {/* {tempCharArray !== [] && <div className=\"portraitListContainer\">Pictures of Stuff</div> } */}\r\n        \r\n      </div>\r\n\r\n      <div className=\"battle-map-post-container\">\r\n        <h1>POST A COMBAT MAP</h1>\r\n        <input id=\"battle-map-input\" placeholder=\"Battle Map URL\" className=\"mapInput\" type=\"text\" value={tempCombatMap} onChange={(event) => setTempCombatMap(event.target.value)}></input>\r\n        <p className=\"postDescription\">Right click any image from the web and click \"copy image location\", then paste the link above. This will be the current combat map for your adventure and will be displayed in the \"Combat\" tab </p>\r\n        <div className=\"worldButtonContainer\"><button className=\"worldSubmitButton\" onClick={newCombatHandler}>SET COMBAT MAP</button></div>\r\n        {tempCombatMap && <div className=\"mapPrev\"><img src={tempCombatMap} alt=\"URL Not Valid\"/></div>}\r\n\r\n      </div>\r\n\r\n\r\n      \r\n\r\n    </div>\r\n  )\r\n}\r\nexport default Post;","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Maps\\WorldMap.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Dice\\Dice.js",["209"],"import React, {useState} from 'react'\r\nimport './Dice.css';\r\nimport DiceRoll from '../DiceRoll'\r\nimport DicePic from '../../Resources/toppng.com-emini-polyhedral-black-green-gold-x7-green-black-rpg-dice-436x397.png'\r\n\r\n\r\nconst Dice = ({sendPlayerRoll}) => {\r\n  return (\r\n    <div className=\"dice-container\">\r\n      <div className=\"dice-picture-container\">\r\n        <img src={DicePic} alt=\"\"></img>\r\n      </div>\r\n      <DiceRoll sendPlayerRoll={sendPlayerRoll} />\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Dice;","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\NPC\\NPCDisplay.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Combat\\PlayerCombat.js",["210"],"import React, { useEffect, useState, useRef } from 'react';\r\n\r\nimport './Combat.css';\r\n\r\nimport { GiPieceSkull } from 'react-icons/gi';\r\nimport PlayerMovement from './PlayerMovement';\r\nimport PlayerInitiative from './PlayerInitiative';\r\nimport Draggable from 'react-draggable';\r\n\r\nconst Combat = ({\r\n  sendPlayerPosition,\r\n  users,\r\n  partyPosition,\r\n  name,\r\n  array,\r\n  monsterData,\r\n  role,\r\n  stats,\r\n  combatMap,\r\n  partyData,\r\n  partyRolls,\r\n  partyStats,\r\n  sendPlayerRoll,\r\n  battleGroup,\r\n  setBattleGroup,\r\n  updateBattleGroup,\r\n  updateKillFeed\r\n}) => {\r\n  const [newMonsterData, setNewMonsterData] = useState(\r\n    monsterData ? [...monsterData] : []\r\n  );\r\n\r\n  const [playerSize, setPlayerSize] = useState(\r\n    partyPosition && partyPosition[partyPosition.find((x) => x.name === name)]\r\n      ? partyPosition[partyPosition.find((x) => x.name === name)].position.size\r\n      : 'small'\r\n  );\r\n\r\n  const [newPartyPosition, setNewPartyPosition] = useState(\r\n    partyPosition ? [...partyPosition] : []\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (monsterData) {\r\n      setNewMonsterData([...monsterData]);\r\n    } else {\r\n      setNewMonsterData([]);\r\n    }\r\n  }, [monsterData]);\r\n\r\n  useEffect(() => {\r\n    if (partyPosition) {\r\n      setNewPartyPosition([...partyPosition]);\r\n    } else {\r\n      setNewPartyPosition([]);\r\n    }\r\n  }, [partyPosition]);\r\n\r\n \r\n\r\n  const [playerLocation, setPlayerLocation] = useState(\r\n    partyPosition && partyPosition.find((x) => x.name === name)\r\n      ? partyPosition.find((x) => x.name === name).position\r\n      : { x: 50, y: 50 }\r\n  );\r\n\r\n  const endTurn = () => {\r\n    let position = {\r\n      x: playerLocation.x,\r\n      y: playerLocation.y,\r\n      size: playerSize,\r\n    };\r\n    console.log(position);\r\n    sendPlayerPosition(position);\r\n    console.log(partyPosition);\r\n  };\r\n\r\n  return (\r\n    <div className=\"combat-outer-border\">\r\n      {/* <button onClick={wtfIsGoingOn}>CHeck for shit</button> */}\r\n      <PlayerInitiative\r\n        partyData={partyData}\r\n        partyRolls={partyRolls}\r\n        users={users}\r\n        battleGroup={battleGroup}\r\n        setBattleGroup={setBattleGroup}\r\n        updateBattleGroup={setBattleGroup}\r\n        updateKillFeed={updateKillFeed}\r\n      />\r\n      <div className=\"outer-combat-wrapper\">\r\n      <div id=\"contentContainer\">\r\n        {role && role !== 'DM' && playerLocation && (\r\n          <Draggable\r\n            bounds=\"parent\"\r\n            defaultClassName=\"absolute\"\r\n            defaultPosition={{ x: playerLocation.x, y: playerLocation.y }}\r\n            onDrag={(e, ui) => {\r\n              const x = playerLocation.x;\r\n              const y = playerLocation.y;\r\n\r\n              let updatedLocation = {\r\n                ...playerLocation,\r\n                x: x + ui.deltaX,\r\n                y: y + ui.deltaY,\r\n              };\r\n              setPlayerLocation(updatedLocation);\r\n            }}\r\n          >\r\n            <div\r\n              className={\r\n                partyPosition &&\r\n                partyPosition.find((x) => x.name === name)\r\n                  ? ` drag-wrapper ${\r\n                      partyPosition.find((x) => x.name === name).position.size\r\n                    }`\r\n                  : ' drag-wrapper small'\r\n              }\r\n            >\r\n              <div className=\"drag-pic-wrapper\">\r\n              <img alt=\"\" src={stats.portrait}></img>\r\n\r\n              </div>\r\n              <div className=\"drag-cover\"></div>\r\n            </div>\r\n          </Draggable>\r\n        )}\r\n\r\n        {newMonsterData && monsterData &&\r\n          newMonsterData.map((monster) => (\r\n            <div className=\"absolute\"   style={{\r\n              left: `${monster.xPosition}px`,\r\n              top: `${monster.yPosition}px`,\r\n              transition: 'left 0.5s ease-in, top 0.5s ease-in',\r\n            }}>\r\n            <div\r\n              id={monster.id}\r\n              key={monster.id}\r\n              className={`drag-wrapper ${monster.size}`}\r\n              \r\n            >\r\n              {monster.dead === true ? (\r\n                <div className=\"drag-pic-wrapper\">\r\n                  <GiPieceSkull className=\"dead-token\" />\r\n\r\n                </div>\r\n              ) : (\r\n                <div className=\"drag-pic-wrapper\">\r\n                  <img alt=\"\" src={monster.icon}></img>\r\n\r\n                </div>\r\n              )}\r\n                       <div className=\"monster-drag-cover\"></div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n\r\n        {/* {Object.keys(partyPosition).filter(player => player !== name).map((user, index) =>  <div \r\n          className={`${partyPosition[user].position.size} circle`}\r\n          key={user} \r\n          id={user}  \r\n          style={{left: `${partyPosition[user].position.x}px`, \r\n                  top: `${partyPosition[user].position.y}px`, \r\n                  position: \"absolute\", \r\n                  zIndex: `${array[index]}`,\r\n                  borderRadius: \"50%\" ,\r\n                  transition: \"left 0.5s ease-in, top 0.5s ease-in\"}} \r\n           \r\n          >\r\n            {partyData[user] && <img \r\n          alt=\"\" \r\n          src={partyData[user].text.portrait}\r\n          className=\"youSuck\"\r\n          >\r\n          </img>}\r\n          </div> )} */}\r\n\r\n        {newPartyPosition.filter((player) => player.name !== name)\r\n          .map((user, index) => (\r\n            <div\r\n              className={`${user.position.size} circle`}\r\n              key={user.name}\r\n              id={user.name}\r\n              style={{\r\n                left: `${user.position.x}px`,\r\n                top: `${user.position.y}px`,\r\n                position: 'absolute',\r\n                zIndex: `${array[index]}`,\r\n                borderRadius: '50%',\r\n                transition: 'left 0.5s ease-in, top 0.5s ease-in',\r\n              }}\r\n            >\r\n                <div className=\"drag-pic-wrapper\">\r\n                <img\r\n                  alt=\"\"\r\n                  src={user.icon}\r\n                  className=\"youSuck\"\r\n                ></img>\r\n                </div>\r\n                <div className=\"party-drag-cover\"></div>\r\n              {/* {partyData[index] && (\r\n                <img\r\n                  alt=\"\"\r\n                  src={partyData[user.name].text.portrait}\r\n                  className=\"youSuck\"\r\n                ></img>\r\n              )} */}\r\n            </div>\r\n          ))}\r\n\r\n        {combatMap && (\r\n          <img className=\"combat-image\" alt=\"\" src={combatMap}></img>\r\n        )}\r\n      </div>\r\n      </div>\r\n\r\n      <PlayerMovement\r\n        endTurn={endTurn}\r\n        stats={stats}\r\n        partyPosition={partyPosition}\r\n        setPlayerSize={setPlayerSize}\r\n        playerSize={playerSize}\r\n        partyData={partyData}\r\n        name={name}\r\n        sendPlayerRoll={sendPlayerRoll}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Combat;\r\n","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Combat\\Combat.js",["211"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport './Combat.css';\r\nimport MonsterCreator from './MonsterCreator';\r\nimport { GiPieceSkull } from 'react-icons/gi';\r\nimport PlayerInitiative from './PlayerInitiative';\r\nimport Draggable from 'react-draggable';\r\n\r\nconst Combat = ({\r\n  users,\r\n  partyPosition,\r\n  name,\r\n  array,\r\n  monsterData,\r\n  sendMonsterInfo,\r\n  clearMonsterInfo,\r\n  clearPlayerPosition,\r\n  combatMap,\r\n  partyData,\r\n  partyRolls,\r\n  showNotification,\r\n  battleGroup,\r\n  setBattleGroup,\r\n  updateBattleGroup,\r\n  role,\r\n  updateKillFeed,\r\n  sendPlayerRoll\r\n}) => {\r\n  const [newMonsterData, setNewMonsterData] = useState(\r\n    monsterData ? [...monsterData] : []\r\n  );\r\n\r\n  const [newPartyPosition, setNewPartyPosition] = useState(\r\n    partyPosition ? [...partyPosition] : []\r\n  );\r\n  const [activeMonster, setActiveMonster] = useState();\r\n\r\n  useEffect(() => {\r\n    if (monsterData) {\r\n      setNewMonsterData([...monsterData]);\r\n    } else {\r\n      setNewMonsterData([]);\r\n    }\r\n  }, [monsterData]);\r\n\r\n \r\n\r\n  useEffect(() => {\r\n    if (partyPosition) {\r\n      setNewPartyPosition([...partyPosition]);\r\n    } else {\r\n      setNewPartyPosition([]);\r\n    }\r\n  }, [partyPosition]);\r\n\r\n  const endMonsterTurn = () => {\r\n    sendMonsterInfo(newMonsterData);\r\n    showNotification('Monster Movement Sent');\r\n    console.log('end monster turn fired');\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"combat-outer-border\">\r\n      <PlayerInitiative\r\n        partyData={partyData}\r\n        partyRolls={partyRolls}\r\n        users={users}\r\n        battleGroup={battleGroup}\r\n        setBattleGroup={setBattleGroup}\r\n        updateBattleGroup={updateBattleGroup}\r\n        role={role}\r\n        sendMonsterInfo={sendMonsterInfo}\r\n        monsterData={monsterData}  \r\n        updateKillFeed={updateKillFeed}      \r\n      />\r\n      <div className=\"outer-combat-wrapper\">\r\n      <div id=\"contentContainer\">\r\n        {newMonsterData &&\r\n          monsterData &&\r\n          newMonsterData.sort((a, b) => a.value - b.value).map((monster, index) => (\r\n            <Draggable\r\n              bounds=\"parent\"\r\n              onDrag={(e, ui) => {\r\n                const x = monster.xPosition;\r\n                const y = monster.yPosition;\r\n\r\n                let updatedList = newMonsterData.map((item) => {\r\n                  if (monster.value === item.value) {\r\n                    return {\r\n                      ...item,\r\n                      xPosition: x + ui.deltaX,\r\n                      yPosition: y + ui.deltaY,\r\n                    };\r\n                  } else {\r\n                    return item;\r\n                  }\r\n                });\r\n\r\n                setNewMonsterData(updatedList);\r\n              }}\r\n              defaultClassName=\"absolute\"\r\n              defaultPosition={{ x: monster.xPosition, y: monster.yPosition }}\r\n            >\r\n              <div className={`drag-wrapper ${monster.size}`}>\r\n                {monster.dead === true ? (\r\n                  <div className=\"drag-pic-wrapper\">\r\n                  <GiPieceSkull className=\"dead-token\" />\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"drag-pic-wrapper\">\r\n                  <img alt=\"\" src={monster.icon}></img>\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"monster-drag-cover\">{monster.value}</div>\r\n              </div>\r\n            </Draggable>\r\n          ))}\r\n\r\n\r\n{/* {newPartyPosition.filter((player) => player.name !== name)\r\n          .map((user, index) => (\r\n            <Draggable\r\n            bounds=\"parent\"\r\n              onDrag={(e, ui) => {\r\n                const x = user.position.x;\r\n                const y = user.position.y;\r\n\r\n                let updatedList = newPartyPosition.map((item) => {\r\n                  if (user.value === item.value) {\r\n                    return {\r\n                      ...item,\r\n                      xPosition: x + ui.deltaX,\r\n                      yPosition: y + ui.deltaY,\r\n                    };\r\n                  } else {\r\n                    return item;\r\n                  }\r\n                });\r\n\r\n                setNewPartyPosition(updatedList);\r\n              }}\r\n              defaultClassName=\"absolute\"\r\n              defaultPosition={{ x: user.position.x, y: user.position.y }}\r\n              key={user.name}\r\n              id={user.name}\r\n             \r\n            >\r\n              <div className={`drag-wrapper ${user.position.size}`}>\r\n               <div className=\"drag-pic-wrapper\">\r\n                <img\r\n                  alt=\"\"\r\n                  src={user.icon}\r\n                  className=\"youSuck\"\r\n                ></img>\r\n                </div>\r\n                <div className=\"party-drag-cover\"></div>\r\n              </div>\r\n            </Draggable>\r\n          ))} */}\r\n\r\n\r\n              \r\n\r\n\r\n        {newPartyPosition.filter((player) => player.name !== name)\r\n          .map((user, index) => (\r\n            <div\r\n              className={`${user.position.size} circle`}\r\n              key={user.name}\r\n              id={user.name}\r\n              style={{\r\n                left: `${user.position.x}px`,\r\n                top: `${user.position.y}px`,\r\n                position: 'absolute',\r\n                zIndex: `${array[index]}`,\r\n                borderRadius: '50%',\r\n                transition: 'left 0.5s ease-in, top 0.5s ease-in',\r\n              }}\r\n            >\r\n               <div className=\"drag-pic-wrapper\">\r\n                <img\r\n                  alt=\"\"\r\n                  src={user.icon}\r\n                  className=\"youSuck\"\r\n                ></img>\r\n                </div>\r\n                <div className=\"party-drag-cover\"></div>\r\n              \r\n            </div>\r\n          ))}\r\n\r\n\r\n\r\n\r\n\r\n\r\n        {combatMap && (\r\n          <img className=\"combat-image\" alt=\"\" src={combatMap}></img>\r\n        )}\r\n      </div>\r\n      </div>\r\n\r\n      <MonsterCreator\r\n        sendMonsterInfo={sendMonsterInfo}\r\n        monsterData={monsterData}\r\n        setActiveMonster={setActiveMonster}\r\n        newMonsterData={newMonsterData}\r\n        setNewMonsterData={setNewMonsterData}\r\n        endMonsterTurn={endMonsterTurn}\r\n        clearMonsterInfo={clearMonsterInfo}\r\n        clearPlayerPosition={clearPlayerPosition}\r\n        activeMonster={activeMonster}\r\n        showNotification={showNotification}\r\n        sendPlayerRoll={sendPlayerRoll}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Combat;\r\n","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\DiceRoll.js",["212","213"],"import React, { useState } from 'react';\r\nimport './DiceRoll.css';\r\nimport diceSound from  '../Resources/diceRoll.mp3';\r\nimport {Howl, Howler} from 'howler';\r\nimport { BsReverseLayoutSidebarInsetReverse } from 'react-icons/bs';\r\n\r\nconst DiceRoll = ({sendPlayerRoll}) => {\r\n  const [result, setResult] = useState(null)\r\n  const [type, setType] = useState(4)\r\n  const [number, setNumber] = useState(1)\r\n  \r\n\r\n  const audioClips = [\r\n    {sound: diceSound, label: \"dice\"}\r\n  ]\r\n\r\n\r\n  const diceOptions = [\r\n    {\r\n      label: \"D4\",\r\n      value: 4\r\n    },\r\n    {\r\n      label: \"D6\",\r\n      value: 6\r\n    },\r\n    {\r\n      label: \"D8\",\r\n      value: 8\r\n    },\r\n    {\r\n      label: \"D10\",\r\n      value: 10\r\n    },\r\n    {\r\n      label: \"D12\",\r\n      value: 12\r\n    },\r\n    {\r\n      label: \"D20\",\r\n      value: 20\r\n    },\r\n\r\n  ]\r\n\r\n  const diceCount = [\r\n    {\r\n      label: 1,\r\n      value: 1\r\n    },\r\n    {\r\n      label: 2,\r\n      value: 2\r\n    },\r\n    {\r\n      label: 3,\r\n      value: 3\r\n    },\r\n    {\r\n      label: 4,\r\n      value: 4\r\n    },\r\n    {\r\n      label: 5,\r\n      value: 5\r\n    },\r\n    {\r\n      label: 6,\r\n      value: 6\r\n    },\r\n  ]\r\n\r\n  const handleType = (event) => {\r\n    setType(event.target.value)\r\n  }\r\n\r\n  const handleNumber = (event) => {\r\n    setNumber(event.target.value)\r\n  }\r\n\r\n  const diceMaths = () => {\r\n    let numArr = []\r\n    if (number > 1) {\r\n      for (let i = 1;  i <= number; i++) {\r\n        numArr.push(Math.floor(Math.random() * type) + 1)\r\n        \r\n      }\r\n    } else {\r\n\r\n      numArr.push(Math.floor(Math.random() * type) + 1)\r\n      \r\n    }\r\n    setResult(numArr);\r\n    sendPlayerRoll(numArr)\r\n    diceFunc(audioClips[0].sound)\r\n    // console.log(diceVal);\r\n  }\r\n\r\n  const diceFunc = (src) => {\r\n    const sound = new Howl({\r\n      src\r\n    })\r\n    sound.play();\r\n  }\r\n\r\n  const clearRoll = () => {\r\n    setResult(null);\r\n    setType(4);\r\n    setNumber(1);\r\n   \r\n  }\r\n\r\n  const totalFunc = () => {\r\n    if (!result || result.length < 1) {\r\n      return 0;\r\n    }\r\n    if (result.length > 0) {\r\n      let total = 0\r\n     for (let i = 0; i < result.length; i++) {\r\n       total = total + result[i]\r\n     }\r\n      return total;\r\n    } else {\r\n      return 0;\r\n    }\r\n\r\n  }\r\n\r\n  return (\r\n    <div className=\"diceRollContainer\">\r\n      <div className=\"diceSelectContainer\">\r\n      <div className=\"custom-select\">\r\n        <select className=\"diceSelect\" onChange={handleType} value={type}>\r\n          {diceOptions.map((option) => (\r\n            <option key={option.value} value={option.value}>{option.label}</option>\r\n          ))}\r\n        </select>\r\n        <span className=\"custom-arrow\" />\r\n      </div>\r\n\r\n      <div className=\"custom-select\">\r\n        <select className=\"diceSelect\" onChange={handleNumber} value={number}>\r\n          {diceCount.map((count) => (\r\n            <option key={count.value }value={count.value}>{count.label}</option>\r\n          ))}\r\n        </select>\r\n        <span className=\"custom-arrow\" />\r\n      </div>\r\n      </div>\r\n      <p className=\"rollInstructions\">Select the type of dice to roll followed by the number of dice</p>\r\n      <div className=\"diceButtonContainer\">\r\n        <button type=\"button\" onClick={clearRoll}>CLEAR</button>\r\n        <button type=\"button\" onClick={diceMaths}>ROLL DICE</button>\r\n      </div>\r\n      <div className=\"diceResultContainer\">\r\n            <div className=\"diceResultBackground\">\r\n          {result &&  result.map((roll, index) => <div className=\"roll_container\"><h1>{roll}</h1></div>)}\r\n          \r\n            </div>\r\n            {(result && result.length > 0) && <div style={{display:\"flex\", alignItems: \"center\", flexDirection: \"column\"}}><p>TOTAL</p><div className=\"roll_container\"><h1 style={{fontSize: \"1rem\"}}>{totalFunc()}</h1></div></div>}\r\n\r\n      </div>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DiceRoll;","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Messaging\\MessageDisplay.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Reusable\\MessageDropDown.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Messaging\\MessageInput.js",["214"],"import React, {useState, useEffect} from 'react'\r\nimport './MessageInput.css';\r\nimport Modal from '../../Components/Modal/Modal'\r\n\r\nconst MessageInput = ({message, setMessage, sendPlayerMessage, recipients}) => {\r\n  const [modal, setModal] = useState(false)\r\n\r\n  const showModal = () => {\r\n    setModal(!modal)\r\n  }\r\n\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault()\r\n    if (recipients.length < 2) {\r\n      showModal()\r\n    } else {\r\n      sendPlayerMessage(e)\r\n    }\r\n\r\n  }\r\n\r\n  return(\r\n    <>\r\n    <Modal \r\n    modalStyle=\"skinny-modal\"\r\n    header=\"Please choose recipients before sending a message!\"\r\n    onCancel = {showModal}\r\n    children = {<button className=\"ok-error-button\" onClick={showModal}>Ok</button>}\r\n    show={modal === true}\r\n\r\n    \r\n    />\r\n    <form className=\"messaging-form\" onSubmit={sendMessage}>\r\n    <textarea\r\n      className=\"messaging-input\"\r\n      type=\"\"\r\n      placeholder=\"Type a message...\"\r\n      value={message}\r\n      onChange={({ target: { value } }) => setMessage(value)}\r\n      onKeyPress={event => event.key === 'Enter' ? sendPlayerMessage(event) : null}\r\n    />\r\n    <button className={message !== \"\" ? \"messaging-sendButton\" : \"messaging-sendButton-disabled\"} type=\"submit\">Send</button>\r\n  </form>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MessageInput;\r\n\r\n","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Messaging\\DropDowns.js",["215"],"import React, {useState, useEffect} from 'react';\r\nimport './DropDowns.css';\r\nimport {MdExpandMore} from 'react-icons/md';\r\n\r\nconst DropDowns = ({users, setRecipients, recipients, name, partyData}) => {\r\nconst [drop1Extended, setDrop1Extended] = useState(false)\r\nconst [drop2Extended, setDrop2Extended] = useState(false)\r\nconst [userArray, setUserArray] = useState()\r\n\r\n\r\n\r\nuseEffect(() => {\r\n  setUserArray(users.filter(user => user.name !== name))\r\n},[name, users])\r\n\r\n\r\n  const showDropDown = () => {\r\n    if (drop1Extended) {\r\n      setDrop1Extended(false)\r\n    }\r\n    if (!drop1Extended) {\r\n      setDrop1Extended(true)\r\n    }\r\n  }\r\n\r\n  const showDropDown2 = () => {\r\n    if (drop2Extended) {\r\n      setDrop2Extended(false)\r\n    }\r\n    if (!drop2Extended) {\r\n      setDrop2Extended(true)\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  const handleCheckboxChange = (event) => {\r\n    \r\n    let newArray = [...recipients, event.target.id];\r\n    if (recipients.includes(event.target.id)) {\r\n      newArray = newArray.filter(user => user !== event.target.id)\r\n    }\r\n    setRecipients(newArray)\r\n   \r\n  }\r\n\r\n  return (\r\n    <div className=\"dropdown-container\" onMouseLeave={() => setDrop2Extended(false)}>\r\n      <form>\r\n       \r\n\r\n\r\n        <div className='multi-select2'>\r\n          <div className=\"select-box\" onClick={showDropDown2}>\r\n          <select>\r\n            <options>Select Players</options>\r\n          </select>\r\n            <div className=\"over-select\"><p>SELECT RECIPIENTS</p><MdExpandMore className={drop2Extended ? \"down-drop rotated\" : \"down-drop\"}/></div>\r\n          </div>\r\n          <div id={drop2Extended ? \"check-boxes-expanded\" : \"check-boxes\"} >\r\n          {users && userArray && userArray.map((user) => <label  key={user.id} for={user.name}>\r\n            <div className=\"check-name-wrapper\">\r\n            <input className=\"recipient-check-box\" type=\"checkbox\" id={user.name} onChange={handleCheckboxChange}/>\r\n              <p className=\"recipient-name-list\">{user.name}</p>\r\n              </div>\r\n              <div className=\"checklist-portrait\">\r\n                {user.role === \"dm\" && <img src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1641933882/Dungeons%20and%20Dragons/AdobeStock_337670650_copy_qjmtlr.jpg\" alt=\"DM\" />}\r\n                {partyData[user.name] &&\r\n                <img src={partyData[user.name].text.portrait} alt=\"\"/>}\r\n              </div>\r\n              </label>)}\r\n\r\n          \r\n          \r\n            \r\n\r\n          </div>\r\n\r\n\r\n        </div>\r\n      </form>\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DropDowns;","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\NPC\\NPC.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Combat\\PlayerInitiative.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Combat\\MonsterCreator.js",["216","217","218","219","220","221","222","223","224","225"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport './MonsterCreator.css';\r\nimport CustomDropDown from '../Reusable/CustomDropdown';\r\nimport MonsterDropDown from '../Reusable/MonsterDropDown';\r\nimport { CgCloseR } from 'react-icons/cg';\r\nimport { GiPieceSkull } from 'react-icons/gi';\r\nimport MonsterListItem from './MonsterListItem';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport Modal from '../Modal/Modal';\r\nimport DiceRoll from '../DiceRoll';\r\n\r\nconst MonsterCreator = ({\r\n  monsterData,\r\n  sendMonsterInfo,\r\n\r\n  newMonsterData,\r\n  setNewMonsterData,\r\n  sendPlayerRoll,\r\n  endTurn,\r\n  endMonsterTurn,\r\n  clearMonsterInfo,\r\n  clearPlayerPosition,\r\n\r\n  showNotification,\r\n}) => {\r\n  const monsterNumberArr = [\r\n    {\r\n      id: 'monster1',\r\n      value: 1,\r\n      dead: false,\r\n      xPosition: 20,\r\n      yPosition: 20,\r\n      icon: '',\r\n      size: 'small',\r\n    },\r\n    {\r\n      id: 'monster2',\r\n      value: 2,\r\n      dead: false,\r\n      xPosition: 20,\r\n      yPosition: 60,\r\n      icon: '',\r\n      size: 'small',\r\n    },\r\n    {\r\n      id: 'monster3',\r\n      value: 3,\r\n      dead: false,\r\n      xPosition: 20,\r\n      yPosition: 100,\r\n      icon: '',\r\n      size: 'small',\r\n    },\r\n    {\r\n      id: 'monster4',\r\n      value: 4,\r\n      dead: false,\r\n      xPosition: 20,\r\n      yPosition: 140,\r\n      icon: '',\r\n      size: 'small',\r\n    },\r\n    {\r\n      id: 'monster5',\r\n      value: 5,\r\n      dead: false,\r\n      xPosition: 20,\r\n      yPosition: 180,\r\n      icon: '',\r\n      size: 'small',\r\n    },\r\n    {\r\n      id: 'monster6',\r\n      value: 6,\r\n      dead: false,\r\n      xPosition: 20,\r\n      yPosition: 220,\r\n      icon: '',\r\n      size: 'small',\r\n    },\r\n    {\r\n      id: 'monster7',\r\n      value: 7,\r\n      dead: false,\r\n      xPosition: 20,\r\n      yPosition: 260,\r\n      icon: '',\r\n      size: 'small',\r\n    },\r\n    {\r\n      id: 'monster8',\r\n      value: 8,\r\n      dead: false,\r\n      xPosition: 20,\r\n      yPosition: 300,\r\n      icon: '',\r\n      size: 'small',\r\n    },\r\n    {\r\n      id: 'monster9',\r\n      value: 9,\r\n      dead: false,\r\n      xPosition: 20,\r\n      yPosition: 340,\r\n      icon: '',\r\n      size: 'small',\r\n    },\r\n    {\r\n      id: 'monster10',\r\n      value: 10,\r\n      dead: false,\r\n      xPosition: 20,\r\n      yPosition: 380,\r\n      icon: '',\r\n      size: 'small',\r\n    },\r\n    {\r\n      id: 'monster11',\r\n      value: 11,\r\n      dead: false,\r\n      xPosition: 20,\r\n      yPosition: 420,\r\n      icon: '',\r\n      size: 'small',\r\n    },\r\n    {\r\n      id: 'monster12',\r\n      value: 12,\r\n      dead: false,\r\n      xPosition: 20,\r\n      yPosition: 460,\r\n      icon: '',\r\n      size: 'small',\r\n    },\r\n    {\r\n      id: 'monster13',\r\n      value: 13,\r\n      dead: false,\r\n      xPosition: 20,\r\n      yPosition: 500,\r\n      icon: '',\r\n      size: 'small',\r\n    },\r\n    {\r\n      id: 'monster14',\r\n      value: 14,\r\n      dead: false,\r\n      xPosition: 20,\r\n      yPosition: 540,\r\n      icon: '',\r\n      size: 'small',\r\n    },\r\n    {\r\n      id: 'monster15',\r\n      value: 15,\r\n      dead: false,\r\n      xPosition: 20,\r\n      yPosition: 580,\r\n      icon: '',\r\n      size: 'small',\r\n    },\r\n  ];\r\n  const [monsterNum, setMonsterNum] = useState([{ id: 0, value: 0 }]);\r\n  const [monsterGroup, setMonsterGroup] = useState();\r\n  // const [monsterOrder, setMonsterOrder] = useState(\r\n  //   newMonsterData ? [...newMonsterData] : null\r\n  // );\r\n  const [errorModal, setErrorModal] = useState(false);\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n\r\n  \r\n  const monsterStatusHandler = (monster) => {\r\n    if (newMonsterData) {\r\n      if (monster.dead === false) {\r\n        let monsterDataCopy = newMonsterData.filter(\r\n          (creature) => creature.id !== monster.id\r\n        );\r\n        let newMonster = { ...monster, dead: true };\r\n        setNewMonsterData([...monsterDataCopy, newMonster]);\r\n      }\r\n    }\r\n\r\n    if (monster.dead === true) {\r\n      let monsterDataCopy = newMonsterData.filter(\r\n        (creature) => creature.id !== monster.id\r\n      );\r\n      let newMonster = { ...monster, dead: false };\r\n      setNewMonsterData([...monsterDataCopy, newMonster]);\r\n    }\r\n  };\r\n\r\n  const IconConfirm = () => {\r\n    if (monsterNum[0].value === 0) {\r\n      return false;\r\n    }\r\n\r\n    let result = true;\r\n    for (let i = 0; i < monsterGroup.length; i++) {\r\n      if (monsterGroup[i].icon === '') {\r\n        result = false;\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const checker = () => {\r\n    // code here to check that there are minions and they all have icons.\r\n    if (monsterNum[0].value === 0 || IconConfirm() === false) {\r\n      setErrorModal(true);\r\n      setErrorMessage(\r\n        'Please set a number of creatures and have an icon URL for each one before confirming.'\r\n      );\r\n      return;\r\n    } else {\r\n      // console.log(monsterNum, monsterGroup);\r\n      sendMonsterInfo(monsterGroup);\r\n      // setMonsterOrder([...monsterGroup]);\r\n    }\r\n  };\r\n\r\n  const handleOnDragEnd = (result) => {\r\n    if (!result.destination) return;\r\n    // const items = Array.from(monsterOrder);\r\n    const items = Array.from(newMonsterData)\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n    // setMonsterOrder(items);\r\n    setNewMonsterData(items)\r\n  };\r\n\r\n  return (\r\n    <div className=\"monster-creator-container\">\r\n      <Modal\r\n        modalStyle=\"skinny-modal\"\r\n        header={errorMessage}\r\n        onCancel={errorModal}\r\n        children={\r\n          <button\r\n            className=\"ok-error-button\"\r\n            onClick={() => setErrorModal(false)}\r\n          >\r\n            Ok\r\n          </button>\r\n        }\r\n        show={errorModal === true}\r\n      />\r\n      {monsterData.length === 0 && (\r\n        <>\r\n          <CustomDropDown\r\n            headingStyle=\"midTitle\"\r\n            title=\"UNIT COUNT\"\r\n            items={monsterNumberArr}\r\n            singleState={monsterNum}\r\n            setSingleState={setMonsterNum}\r\n            setSecondState={setMonsterGroup}\r\n          />\r\n          {monsterNum[0].id !== 0 && (\r\n            <MonsterDropDown\r\n              title=\"MONSTER ICONS\"\r\n              items={monsterGroup}\r\n              setMonsterGroup={setMonsterGroup}\r\n              monsterGroup={monsterGroup}\r\n            />\r\n          )}\r\n          <div className=\"dmCombat_instructions\">\r\n            <p>\r\n              First pick the number of units you want to place on the map by\r\n              selecting in the \"Unit Count\" tab.\r\n            </p>\r\n            <p>\r\n              Second, under the \"Monster Icons\" tab pick the size the monster\r\n              will be on the grid, and then right click any image on the web and\r\n              paste it into the monster's input bar to add the monster's image.\r\n            </p>\r\n          </div>\r\n        </>\r\n      )}\r\n\r\n      {monsterData && (\r\n        <div className=\"dmCombat_instructions\">\r\n          <p>\r\n            To move a monster just drag and drop it to a place within the battle map. When you are done with your movement phase\r\n            click the \"Confirm Movement\" button below to finalize. This will make all monster positions available to the players.\r\n          </p>\r\n          <p>\r\n            If a creature is destroyed click the red X box next to its\r\n            respective select button, then click the \"Confirm Movement\" button.\r\n            A skull will now appear instead of the creature's original icon,\r\n            letting the players know it has been destroyed.\r\n          </p>\r\n          <p>\r\n            If the battle is over and you want to reset creatures and move\r\n            character locations back to none click the \"Clear Monsters\" and\r\n            \"Clear Players\" button.\r\n          </p>\r\n        </div>\r\n      )}\r\n\r\n      {monsterData.length === 0 && (\r\n        <div className=\"combatButton_container\">\r\n          <button onClick={checker} className=\"minions-button\">\r\n            CREATE MY MINIONS!\r\n          </button>\r\n        </div>\r\n      )}\r\n      {/* <DragDropContext onDragEnd={handleOnDragEnd}>\r\n        <Droppable droppableId=\"monsters\">\r\n          {(provided) => (\r\n            <div\r\n              className=\"monster-list-container\"\r\n              {...provided.droppableProps}\r\n              ref={provided.innerRef}\r\n            >\r\n              {newMonsterData &&\r\n              // this was monsterOrder before\r\n                newMonsterData.map((monster, index) => (\r\n                  <Draggable\r\n                    key={monster.id}\r\n                    draggableId={monster.id}\r\n                    index={index}\r\n                  >\r\n                    {(provided) => (\r\n                      <div\r\n                        className=\"monster-list-item-container\"\r\n                        draggable=\"true\"\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                      >\r\n                        <div className=\"monster-item-image\">\r\n                          {monster.dead === true && (\r\n                            <GiPieceSkull className=\"dead-icon\" />\r\n                          )}\r\n                          {monster.dead === false && (\r\n                            <img src={monster.icon} alt=\"\" />\r\n                          )}\r\n                        </div>\r\n\r\n                        <h1 style={{color: \"white\"}}>{monster.value}</h1>\r\n\r\n                        <div\r\n                          className=\"monster-item-delete\"\r\n                          onClick={() => {\r\n                            monsterStatusHandler(monster);\r\n                            showNotification('Monster Status Changed');\r\n                          }}\r\n                        >\r\n                          <CgCloseR className=\"monster-delete-icon\" />\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </Draggable>\r\n                ))}\r\n              {provided.placeholder}\r\n            </div>\r\n          )}\r\n        </Droppable>\r\n      </DragDropContext> */}\r\n      {newMonsterData && (\r\n        <div className=\"combatButton_container\">\r\n          <button onClick={endMonsterTurn} className=\"minions-button\">\r\n            CONFIRM MOVEMENT\r\n          </button>\r\n        </div>\r\n      )}\r\n      {newMonsterData && (\r\n        <div className=\"combatButton_container\">\r\n          <button\r\n            className=\"minions-button\"\r\n            onClick={() => {\r\n              clearMonsterInfo();\r\n            }}\r\n          >\r\n            CLEAR MONSTERS\r\n          </button>\r\n        </div>\r\n      )}\r\n      <div className=\"combatButton_container\" style={{ marginBottom: '2rem' }}>\r\n        <button className=\"minions-button\" onClick={clearPlayerPosition}>\r\n          CLEAR PLAYERS\r\n        </button>\r\n      </div>\r\n\r\n      <DiceRoll sendPlayerRoll={sendPlayerRoll}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MonsterCreator;\r\n","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Combat\\PlayerMovement.js",["226","227"],"import React, {useState, useEffect} from 'react'\r\nimport './MonsterCreator.css';\r\nimport PlayerListItem from './PlayerListItem';\r\nimport DiceRoll from '../DiceRoll';\r\n\r\n\r\n\r\nconst PlayerMovement = ({endTurn, stats, partyPosition, setPlayerSize, playerSize, partyData, name, sendPlayerRoll}) => {\r\n  return (\r\n    <div className=\"monster-creator-container\">\r\n      \r\n      <div className=\"monster-list-container\">\r\n       <PlayerListItem stats={stats} setPlayerSize={setPlayerSize} playerSize={playerSize} partyData={partyData} name={name}/>\r\n       <div className=\"combatButton_container\" style={{backgroundColor: \"rgba(0, 0, 0, 0.733)\", marginTop: \"0px\"}}>\r\n        <button onClick={endTurn} className=\"minions-button\">CONFIRM MOVEMENT</button>\r\n\r\n       </div>\r\n        {/* <button onClick={() => {console.log(partyPosition)}} className=\"minions-button\">Party Position</button> */}\r\n      </div>\r\n      <div className=\"black-background\">\r\n      <DiceRoll sendPlayerRoll={sendPlayerRoll} />\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PlayerMovement;","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Messaging\\Message.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Combat\\MonsterListItem.js",["228"],"import React, {useState, useEffect} from 'react'\r\nimport './MonsterCreator.css';\r\nimport {GiPieceSkull} from 'react-icons/gi'\r\nimport { CgCloseR }  from 'react-icons/cg'\r\n\r\nconst MonsterListItem = ({monster, removeThisCrap, setActiveMonster, newMonsterData, setNewMonsterData, monsterStatusHandler, hack, setHack}) => {\r\n  const [dead, setDead] = useState(false)\r\n\r\n  return (\r\n    \r\n      <div className=\"monster-list-item-container\" draggable=\"true\" >\r\n        <div className=\"monster-item-image\">\r\n          {monster.dead === true && <GiPieceSkull className=\"dead-icon\" />}\r\n          {monster.dead === false && <img src={monster.icon} alt=\"\" />}\r\n        </div>\r\n        <div className=\"select-monster-container\">\r\n          <button onClick={() => {\r\n        removeThisCrap();\r\n        setActiveMonster(monster);\r\n        // does remove this crap need to be actually called here? does the onclick need an anonymous function?\r\n        \r\n        }}>\r\n            SELECT\r\n          </button>\r\n          </div>\r\n        <div className=\"monster-item-delete\" onClick={() => {\r\n          monsterStatusHandler(monster)\r\n          setHack(hack)\r\n          setDead(!dead)\r\n        }}>\r\n          <CgCloseR className=\"monster-delete-icon\"/>\r\n        </div>\r\n\r\n\r\n\r\n      </div>\r\n    \r\n\r\n  )\r\n}\r\n\r\nexport default MonsterListItem;","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Reusable\\CustomDropdown.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Reusable\\MonsterDropDown.js",["229","230","231","232"],"import React, { useState } from 'react';\r\nimport onClickOutside from 'react-onclickoutside';\r\nimport './MonsterDropDown.css';\r\nimport MonsterInputs from './MonsterInputs';\r\nimport {MdExpandMore} from 'react-icons/md';\r\n\r\nfunction Dropdown({ title, items, multiSelect = false, headingStyle, setSingleState, singleState, monsterGroup, setMonsterGroup}) {\r\n  const [open, setOpen] = useState(false);\r\n  const [selection, setSelection] = useState([]);\r\n  const toggle = () => setOpen(!open);\r\n  // Dropdown.handleClickOutside = () => setOpen(false);\r\n\r\n  function handleOnClick(item) {\r\n    console.log(\"lol i dont do anything\")\r\n    // if (!selection.some(current => current.id === item.id)) {\r\n    //   if (!multiSelect) {\r\n    //     setSelection([item]);\r\n    //     setSingleState([item]);\r\n     \r\n\r\n    //   } else if (multiSelect) {\r\n    //     setSelection([...selection, item]);\r\n    //     setSingleState([...singleState, item])\r\n    //   }\r\n    // } else {\r\n    //   let selectionAfterRemoval = selection;\r\n    //   selectionAfterRemoval = selectionAfterRemoval.filter(\r\n    //     current => current.id !== item.id\r\n    //   );\r\n    //   setSelection([...selectionAfterRemoval]);\r\n    //   setSingleState([...selectionAfterRemoval])\r\n    // }\r\n  }\r\n\r\n  function isItemInSelection(item) {\r\n    if (selection.some(current => current.id === item.id)) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  return (\r\n    <div className={`monster-drop-wrapper ${headingStyle}`}>\r\n      <div\r\n        tabIndex={0}\r\n        className={`monster-drop-header ${headingStyle}`}\r\n        role=\"button\"\r\n        onKeyPress={() => toggle(!open)}\r\n        onClick={() => toggle(!open)}\r\n      >\r\n        <div className='-monster-drop-header__title'>\r\n          <p className=\"monster-drop-header__title--bold\">{title}</p>\r\n        </div>\r\n        <div className=\"monster-drop-header__action\">\r\n        <MdExpandMore className={open ? \"down-drop rotated\" : \"down-drop\"}/>\r\n          {/* <p>{open ? 'Close' : 'Open'}</p> */}\r\n        </div>\r\n      </div>\r\n      {open && (\r\n        <ul className=\"monster-drop-list\">\r\n          {items.map(item => (\r\n            <li className=\"monster-drop-list-item\" key={item.id}>\r\n              <button >\r\n                <MonsterInputs item={item} items={items} monsterGroup={monsterGroup} setMonsterGroup={setMonsterGroup}/>\r\n                {/* <input type=\"text\" className=\"monster-input\" placeholder=\"Portrait URL\" />\r\n                <div className=\"monster-size-container\">\r\n                  <button>S</button>\r\n                  <button>M</button>\r\n                  <button>L</button>\r\n                </div> */}\r\n                {/* <span>{item.value}</span>\r\n                <span>{isItemInSelection(item) && 'Selected'}</span> */}\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// const clickOutsideConfig = {\r\n//   handleClickOutside: () => Dropdown.handleClickOutside,\r\n// };\r\n\r\n// export default onClickOutside(Dropdown, clickOutsideConfig);\r\n\r\nexport default Dropdown;\r\n","W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Combat\\PlayerListItem.js",[],"W:\\Coding Projects\\TabletopAssistant\\FrontEnd\\TableTopUI\\src\\Components\\Reusable\\MonsterInputs.js",[],{"ruleId":"233","replacedBy":"234"},{"ruleId":"235","replacedBy":"236"},{"ruleId":"237","severity":1,"message":"238","line":3,"column":8,"nodeType":"239","messageId":"240","endLine":3,"endColumn":18},{"ruleId":"237","severity":1,"message":"241","line":37,"column":9,"nodeType":"239","messageId":"240","endLine":37,"endColumn":18},{"ruleId":"237","severity":1,"message":"242","line":45,"column":9,"nodeType":"239","messageId":"240","endLine":45,"endColumn":18},{"ruleId":"237","severity":1,"message":"243","line":11,"column":16,"nodeType":"239","messageId":"240","endLine":11,"endColumn":22},{"ruleId":"237","severity":1,"message":"244","line":24,"column":10,"nodeType":"239","messageId":"240","endLine":24,"endColumn":14},{"ruleId":"237","severity":1,"message":"245","line":97,"column":22,"nodeType":"239","messageId":"240","endLine":97,"endColumn":35},{"ruleId":"237","severity":1,"message":"246","line":98,"column":9,"nodeType":"239","messageId":"240","endLine":98,"endColumn":19},{"ruleId":"247","severity":1,"message":"248","line":148,"column":6,"nodeType":"249","endLine":148,"endColumn":33,"suggestions":"250"},{"ruleId":"247","severity":1,"message":"251","line":177,"column":6,"nodeType":"249","endLine":177,"endColumn":11,"suggestions":"252"},{"ruleId":"237","severity":1,"message":"253","line":486,"column":9,"nodeType":"239","messageId":"240","endLine":486,"endColumn":26},{"ruleId":"237","severity":1,"message":"254","line":518,"column":9,"nodeType":"239","messageId":"240","endLine":518,"endColumn":20},{"ruleId":"237","severity":1,"message":"255","line":9,"column":21,"nodeType":"239","messageId":"240","endLine":9,"endColumn":33},{"ruleId":"237","severity":1,"message":"256","line":10,"column":23,"nodeType":"239","messageId":"240","endLine":10,"endColumn":37},{"ruleId":"237","severity":1,"message":"257","line":3,"column":8,"nodeType":"239","messageId":"240","endLine":3,"endColumn":16},{"ruleId":"247","severity":1,"message":"258","line":10,"column":6,"nodeType":"249","endLine":10,"endColumn":17,"suggestions":"259"},{"ruleId":"237","severity":1,"message":"260","line":2,"column":8,"nodeType":"239","messageId":"240","endLine":2,"endColumn":12},{"ruleId":"237","severity":1,"message":"261","line":3,"column":8,"nodeType":"239","messageId":"240","endLine":3,"endColumn":16},{"ruleId":"237","severity":1,"message":"262","line":8,"column":10,"nodeType":"239","messageId":"240","endLine":8,"endColumn":27},{"ruleId":"237","severity":1,"message":"263","line":8,"column":29,"nodeType":"239","messageId":"240","endLine":8,"endColumn":49},{"ruleId":"247","severity":1,"message":"264","line":11,"column":3,"nodeType":"239","endLine":11,"endColumn":12,"suggestions":"265"},{"ruleId":"237","severity":1,"message":"266","line":1,"column":16,"nodeType":"239","messageId":"240","endLine":1,"endColumn":24},{"ruleId":"237","severity":1,"message":"267","line":6,"column":8,"nodeType":"239","messageId":"240","endLine":6,"endColumn":23},{"ruleId":"247","severity":1,"message":"268","line":22,"column":6,"nodeType":"249","endLine":22,"endColumn":8,"suggestions":"269"},{"ruleId":"237","severity":1,"message":"270","line":43,"column":9,"nodeType":"239","messageId":"240","endLine":43,"endColumn":19},{"ruleId":"237","severity":1,"message":"266","line":1,"column":16,"nodeType":"239","messageId":"240","endLine":1,"endColumn":24},{"ruleId":"237","severity":1,"message":"271","line":1,"column":38,"nodeType":"239","messageId":"240","endLine":1,"endColumn":44},{"ruleId":"237","severity":1,"message":"271","line":1,"column":38,"nodeType":"239","messageId":"240","endLine":1,"endColumn":44},{"ruleId":"237","severity":1,"message":"243","line":4,"column":15,"nodeType":"239","messageId":"240","endLine":4,"endColumn":21},{"ruleId":"237","severity":1,"message":"272","line":5,"column":10,"nodeType":"239","messageId":"240","endLine":5,"endColumn":44},{"ruleId":"237","severity":1,"message":"273","line":1,"column":26,"nodeType":"239","messageId":"240","endLine":1,"endColumn":35},{"ruleId":"237","severity":1,"message":"274","line":17,"column":9,"nodeType":"239","messageId":"240","endLine":17,"endColumn":21},{"ruleId":"237","severity":1,"message":"273","line":1,"column":27,"nodeType":"239","messageId":"240","endLine":1,"endColumn":36},{"ruleId":"237","severity":1,"message":"271","line":1,"column":38,"nodeType":"239","messageId":"240","endLine":1,"endColumn":44},{"ruleId":"237","severity":1,"message":"275","line":5,"column":10,"nodeType":"239","messageId":"240","endLine":5,"endColumn":18},{"ruleId":"237","severity":1,"message":"276","line":6,"column":10,"nodeType":"239","messageId":"240","endLine":6,"endColumn":22},{"ruleId":"237","severity":1,"message":"277","line":7,"column":8,"nodeType":"239","messageId":"240","endLine":7,"endColumn":23},{"ruleId":"237","severity":1,"message":"278","line":8,"column":10,"nodeType":"239","messageId":"240","endLine":8,"endColumn":25},{"ruleId":"237","severity":1,"message":"279","line":8,"column":27,"nodeType":"239","messageId":"240","endLine":8,"endColumn":36},{"ruleId":"237","severity":1,"message":"280","line":8,"column":38,"nodeType":"239","messageId":"240","endLine":8,"endColumn":47},{"ruleId":"237","severity":1,"message":"281","line":172,"column":9,"nodeType":"239","messageId":"240","endLine":172,"endColumn":29},{"ruleId":"237","severity":1,"message":"282","line":221,"column":9,"nodeType":"239","messageId":"240","endLine":221,"endColumn":24},{"ruleId":"237","severity":1,"message":"266","line":1,"column":16,"nodeType":"239","messageId":"240","endLine":1,"endColumn":24},{"ruleId":"237","severity":1,"message":"273","line":1,"column":26,"nodeType":"239","messageId":"240","endLine":1,"endColumn":35},{"ruleId":"237","severity":1,"message":"273","line":1,"column":26,"nodeType":"239","messageId":"240","endLine":1,"endColumn":35},{"ruleId":"237","severity":1,"message":"283","line":2,"column":8,"nodeType":"239","messageId":"240","endLine":2,"endColumn":22},{"ruleId":"237","severity":1,"message":"284","line":9,"column":21,"nodeType":"239","messageId":"240","endLine":9,"endColumn":33},{"ruleId":"237","severity":1,"message":"285","line":13,"column":12,"nodeType":"239","messageId":"240","endLine":13,"endColumn":25},{"ruleId":"237","severity":1,"message":"286","line":35,"column":12,"nodeType":"239","messageId":"240","endLine":35,"endColumn":29},"no-native-reassign",["287"],"no-negated-in-lhs",["288"],"no-unused-vars","'ErrorModal' is defined but never used.","Identifier","unusedVar","'showState' is assigned a value but never used.","'applyType' is assigned a value but never used.","'Howler' is defined but never used.","'room' is assigned a value but never used.","'setStupidHack' is assigned a value but never used.","'audioClips' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'recipients' and 'stats'. Either include them or remove the dependency array. You can also do a functional update 'setStats(s => ...)' if you only need 'stats' in the 'setStats' call.","ArrayExpression",["289"],"React Hook useEffect has a missing dependency: 'unseenMap'. Either include it or remove the dependency array. You can also do a functional update 'setUnseenMap(u => ...)' if you only need 'unseenMap' in the 'setUnseenMap' call.",["290"],"'notificationAudio' is assigned a value but never used.","'displayTest' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'setCorrectName' is assigned a value but never used.","'Backdrop' is defined but never used.","React Hook useEffect has a missing dependency: 'helpTopicHandler'. Either include it or remove the dependency array. If 'helpTopicHandler' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["291"],"'Dice' is defined but never used.","'DiceRoll' is defined but never used.","'playerIconPreview' is assigned a value but never used.","'setPlayerIconPreview' is assigned a value but never used.","React Hook useEffect contains a call to 'setCorrectName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [newName] as a second argument to the useEffect Hook.",["292"],"'useState' is defined but never used.","'MessageDropdown' is defined but never used.","React Hook useEffect has a missing dependency: 'setUnreadMessages'. Either include it or remove the dependency array. If 'setUnreadMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["293"],"'checkState' is assigned a value but never used.","'useRef' is defined but never used.","'BsReverseLayoutSidebarInsetReverse' is defined but never used.","'useEffect' is defined but never used.","'showDropDown' is assigned a value but never used.","'CgCloseR' is defined but never used.","'GiPieceSkull' is defined but never used.","'MonsterListItem' is defined but never used.","'DragDropContext' is defined but never used.","'Droppable' is defined but never used.","'Draggable' is defined but never used.","'monsterStatusHandler' is assigned a value but never used.","'handleOnDragEnd' is assigned a value but never used.","'onClickOutside' is defined but never used.","'setSelection' is assigned a value but never used.","'handleOnClick' is defined but never used.","'isItemInSelection' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"294","fix":"295"},{"desc":"296","fix":"297"},{"desc":"298","fix":"299"},{"desc":"300","fix":"301"},{"desc":"302","fix":"303"},"Update the dependencies array to be: [ENDPOINT, location.search, recipients, stats]",{"range":"304","text":"305"},"Update the dependencies array to be: [map, unseenMap]",{"range":"306","text":"307"},"Update the dependencies array to be: [helpState, helpTopicHandler]",{"range":"308","text":"309"},"Add dependencies array: [newName]",{"range":"310","text":"311"},"Update the dependencies array to be: [setUnreadMessages]",{"range":"312","text":"313"},[5136,5163],"[ENDPOINT, location.search, recipients, stats]",[5831,5836],"[map, unseenMap]",[303,314],"[helpState, helpTopicHandler]",[495,495],", [newName]",[634,636],"[setUnreadMessages]"]