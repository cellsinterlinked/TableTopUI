[{"/Users/scottbillings/Desktop/TableTopUI/src/index.js":"1","/Users/scottbillings/Desktop/TableTopUI/src/App.js":"2","/Users/scottbillings/Desktop/TableTopUI/src/Pages/Join.js":"3","/Users/scottbillings/Desktop/TableTopUI/src/Pages/Play.js":"4","/Users/scottbillings/Desktop/TableTopUI/src/Components/Modal/Modal.js":"5","/Users/scottbillings/Desktop/TableTopUI/src/Components/Modal/ErrorModal.js":"6","/Users/scottbillings/Desktop/TableTopUI/src/Components/Character.js":"7","/Users/scottbillings/Desktop/TableTopUI/src/Components/Modal/NotificationModal.js":"8","/Users/scottbillings/Desktop/TableTopUI/src/Components/Navigation/Exit.js":"9","/Users/scottbillings/Desktop/TableTopUI/src/Components/Navigation/SideBar.js":"10","/Users/scottbillings/Desktop/TableTopUI/src/Components/Reusable/FrontDropDown.js":"11","/Users/scottbillings/Desktop/TableTopUI/src/Components/Navigation/BackDrop.js":"12","/Users/scottbillings/Desktop/TableTopUI/src/Components/DiceLoad.js":"13","/Users/scottbillings/Desktop/TableTopUI/src/Components/Navigation/PostDrawer.js":"14","/Users/scottbillings/Desktop/TableTopUI/src/Components/Navigation/SideDrawer.js":"15","/Users/scottbillings/Desktop/TableTopUI/src/Components/Navigation/MapDrawer.js":"16","/Users/scottbillings/Desktop/TableTopUI/src/Components/Navigation/DiceDrawer.js":"17","/Users/scottbillings/Desktop/TableTopUI/src/Components/InputBar.js":"18","/Users/scottbillings/Desktop/TableTopUI/src/Components/Messaging/Messaging.js":"19","/Users/scottbillings/Desktop/TableTopUI/src/Components/Maps/WorldMap.js":"20","/Users/scottbillings/Desktop/TableTopUI/src/Components/NPC/NPCDisplay.js":"21","/Users/scottbillings/Desktop/TableTopUI/src/Components/Dice/Dice.js":"22","/Users/scottbillings/Desktop/TableTopUI/src/Components/Combat/Combat.js":"23","/Users/scottbillings/Desktop/TableTopUI/src/Components/Post/Post.js":"24","/Users/scottbillings/Desktop/TableTopUI/src/Components/Combat/PlayerCombat.js":"25","/Users/scottbillings/Desktop/TableTopUI/src/Components/DiceRoll.js":"26","/Users/scottbillings/Desktop/TableTopUI/src/Components/Messaging/MessageDisplay.js":"27","/Users/scottbillings/Desktop/TableTopUI/src/Components/Messaging/MessageInput.js":"28","/Users/scottbillings/Desktop/TableTopUI/src/Components/Messaging/DropDowns.js":"29","/Users/scottbillings/Desktop/TableTopUI/src/Components/Combat/MonsterCreator.js":"30","/Users/scottbillings/Desktop/TableTopUI/src/Components/NPC/NPC.js":"31","/Users/scottbillings/Desktop/TableTopUI/src/Components/Reusable/MessageDropDown.js":"32","/Users/scottbillings/Desktop/TableTopUI/src/Components/Combat/PlayerMovement.js":"33","/Users/scottbillings/Desktop/TableTopUI/src/Components/Combat/PlayerInitiative.js":"34","/Users/scottbillings/Desktop/TableTopUI/src/Components/Messaging/Message.js":"35","/Users/scottbillings/Desktop/TableTopUI/src/Components/Reusable/CustomDropdown.js":"36","/Users/scottbillings/Desktop/TableTopUI/src/Components/Reusable/MonsterDropDown.js":"37","/Users/scottbillings/Desktop/TableTopUI/src/Components/Combat/MonsterListItem.js":"38","/Users/scottbillings/Desktop/TableTopUI/src/Components/Combat/PlayerListItem.js":"39","/Users/scottbillings/Desktop/TableTopUI/src/Components/Reusable/MonsterInputs.js":"40","/Users/scottbillings/Desktop/TableTopUI/src/Components/Modal/Help/Help.js":"41"},{"size":167,"mtime":1632427674524,"results":"42","hashOfConfig":"43"},{"size":340,"mtime":1611171411057,"results":"44","hashOfConfig":"43"},{"size":3514,"mtime":1641495217328,"results":"45","hashOfConfig":"43"},{"size":16954,"mtime":1643253417701,"results":"46","hashOfConfig":"43"},{"size":1159,"mtime":1642099814742,"results":"47","hashOfConfig":"43"},{"size":625,"mtime":1632427674466,"results":"48","hashOfConfig":"43"},{"size":4048,"mtime":1641932588915,"results":"49","hashOfConfig":"43"},{"size":1268,"mtime":1632427674468,"results":"50","hashOfConfig":"43"},{"size":485,"mtime":1634827218773,"results":"51","hashOfConfig":"43"},{"size":9634,"mtime":1642185885655,"results":"52","hashOfConfig":"43"},{"size":2824,"mtime":1641494177041,"results":"53","hashOfConfig":"43"},{"size":326,"mtime":1632427674471,"results":"54","hashOfConfig":"43"},{"size":322,"mtime":1632427674454,"results":"55","hashOfConfig":"43"},{"size":552,"mtime":1632427674475,"results":"56","hashOfConfig":"43"},{"size":559,"mtime":1632427674477,"results":"57","hashOfConfig":"43"},{"size":552,"mtime":1632427674474,"results":"58","hashOfConfig":"43"},{"size":552,"mtime":1632427674472,"results":"59","hashOfConfig":"43"},{"size":5587,"mtime":1641931161658,"results":"60","hashOfConfig":"43"},{"size":1267,"mtime":1641939084242,"results":"61","hashOfConfig":"43"},{"size":597,"mtime":1632427674459,"results":"62","hashOfConfig":"43"},{"size":1848,"mtime":1643251047814,"results":"63","hashOfConfig":"43"},{"size":491,"mtime":1632427674453,"results":"64","hashOfConfig":"43"},{"size":4407,"mtime":1643243473838,"results":"65","hashOfConfig":"43"},{"size":4291,"mtime":1641923790373,"results":"66","hashOfConfig":"43"},{"size":5971,"mtime":1643241956246,"results":"67","hashOfConfig":"43"},{"size":3655,"mtime":1641576031644,"results":"68","hashOfConfig":"43"},{"size":664,"mtime":1641505522111,"results":"69","hashOfConfig":"43"},{"size":1257,"mtime":1641942103236,"results":"70","hashOfConfig":"43"},{"size":2462,"mtime":1641937856299,"results":"71","hashOfConfig":"43"},{"size":10486,"mtime":1643252256122,"results":"72","hashOfConfig":"43"},{"size":2082,"mtime":1642213302133,"results":"73","hashOfConfig":"43"},{"size":2490,"mtime":1642097289440,"results":"74","hashOfConfig":"43"},{"size":1033,"mtime":1641583622622,"results":"75","hashOfConfig":"43"},{"size":2337,"mtime":1641934547113,"results":"76","hashOfConfig":"43"},{"size":1096,"mtime":1641922204132,"results":"77","hashOfConfig":"43"},{"size":2440,"mtime":1641581655970,"results":"78","hashOfConfig":"43"},{"size":2989,"mtime":1642097571618,"results":"79","hashOfConfig":"43"},{"size":1279,"mtime":1632427674449,"results":"80","hashOfConfig":"43"},{"size":1488,"mtime":1643252378834,"results":"81","hashOfConfig":"43"},{"size":1776,"mtime":1632427674482,"results":"82","hashOfConfig":"43"},{"size":38169,"mtime":1643253375778,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"gszmng",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"86"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"86"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"86"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"86"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"86"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"86"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"86"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"86"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"86"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"86"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"86"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"86"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"86"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"86"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"86"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/scottbillings/Desktop/TableTopUI/src/index.js",[],["183","184"],"/Users/scottbillings/Desktop/TableTopUI/src/App.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Pages/Join.js",["185","186","187"],"import React, { useState, useEffect } from  'react';\nimport { Link } from 'react-router-dom';\nimport ErrorModal from '../Components/Modal/ErrorModal'\nimport './Join.css';\nimport FrontDropdown from '../Components/Reusable/FrontDropDown';\nimport Modal from '../Components/Modal/Modal';\nimport {MdPhonelinkErase} from 'react-icons/md';\n\n\nconst Join = () => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [playerType, setPlayerType] = useState([{id:1, value: 'PLAYER'}])\n  const [showResolutionModal, setShowResolutionModal] = useState(false) ;\n\n  const items = [\n    {\n      id: 1,\n      value: 'PLAYER'\n    },\n    {\n      id: 2,\n      value: 'DM'\n    }\n  ]\n\n  useEffect(() => {\n    let res = window.screen.availWidth * window.devicePixelRatio \n    console.log(res)\n    if (res < 1700) {\n      setShowResolutionModal(true)\n    }\n  }, [])\n\n\n\n  const showState = () => {\n    console.log(playerType[0].value);\n  }\n  \n  const closeModal = () => {\n    setShowResolutionModal(false)\n  }\n\n  const applyType = (type) => {\n    setPlayerType(type)\n    \n  }\n  \n\n  return (\n    <>\n      <Modal \n      show={showResolutionModal === true} \n      children={\n      <div className='new-resolution-box'>\n      <p>This site's tools and user interface require more screen space than your device currently has! Please switch to a computer to enjoy all of Table Top Assistant's features. </p>\n        <MdPhonelinkErase className='no-phone'/>\n      </div>  \n        }\n      onCancel={closeModal}\n      header={<p>STOP!</p>}\n      footer={<button onClick={closeModal}>Got It!</button>}\n      />\n    {window.screen.availWidth * window.devicePixelRatio < 1700 && <div className='mobile-join'></div>}\n    {window.screen.availWidth * window.devicePixelRatio > 1700 && <div className=\"joinOuterContainer\">\n\n       <div className='joinInnerContainer'>\n        <h1 className=\"heading\">JOIN THE ADVENTURE</h1>\n        <div className=\"joinInputBox\"><input placeholder=\"Character Name...\" className=\"joinInput\" type=\"text\" value={name} onChange={(event) => setName(event.target.value)}></input></div>\n        <div className=\"joinInputBox\"><input placeholder=\"Room...\" className=\"joinInput\" type=\"text\" value={room} onChange={(event) => setRoom(event.target.value)}></input></div>\n        <FrontDropdown items={items} title={playerType[0].value} headingStyle=\"frontPage spaceTop\" setSingleState={setPlayerType} singleState={playerType}/>\n\n        <p className=\"dmInstructions\">If you are in the Dungeon Master role please choose a name for your room, the name your players will see you as and set the role to \"DM\"</p>\n        <p className=\"playerInstructions\">If you are in the Player role please give your character name, the name of the room your Dungeon Master chose, and make sure \"Player\" role is selected. </p>\n        {name && room && <Link className=\"button-link-box\"style={{textDecoration: \"none\", fontFamily: \"'Niconne', cursive\"}} onClick={e => (!name || !room) ? e.preventDefault() : null} to={`/play?name=${name}&room=${room}&role=${playerType[0].value}`}>\n          <button className=\"signInButton\" type=\"submit\">JOIN PARTY</button>\n        </Link>}\n\n        {(!name || !room) && \n        \n          <button className=\"signInButton_Inactive\" type=\"button\" onClick={() => {alert(\"Please input a character name and room to join\")}}>JOIN PARTY</button>\n        }\n       \n      </div>\n    </div>}\n</>\n  )\n}\n\nexport default Join;\n\n// to={`/play?name=${name}&room=${room}$role=${playerType[0].value}`}","/Users/scottbillings/Desktop/TableTopUI/src/Pages/Play.js",["188","189","190","191","192","193","194"],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Modal/Modal.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Modal/ErrorModal.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Character.js",["195"],"import React, {useState, useEffect} from 'react';\nimport './Character.css';\nimport DiceLoad from './DiceLoad';\nimport {GiIciclesAura} from 'react-icons/gi';\nimport {MdLiveHelp} from 'react-icons/md'\n\nconst Character = ({partyRolls, partyData, name, individualRole}) => {\n  const [playerStats, setPlayerStats] = useState(null)\n  const [isLoading, setIsLoading] = useState(false);\n  const [correctName, setCorrectName] = useState(\"\")\n\n  // let user = props.name\n\n  // let playerStats = props.partyData[user] || null;\n  // let playerRoll = props.partyRolls[user]\n\n  const funFunction = async () => {\n     setIsLoading(true)\n     setTimeout(() => {setIsLoading(false)}, 1000)\n\n  }\n\n  useEffect(() => {\n  \n    setPlayerStats(partyData[name])\n    setCorrectName(newName())\n  },[partyData, name])\n\n  useEffect(() => {\n    funFunction()\n  }, [individualRole])\n\n  \nconst newName = () => {\n  let arr = name.split(\" \")\n  let newArr = []\n  for (let i=0; i<arr.length; i++){\n    newArr.push (arr[i].charAt(0).toUpperCase() + arr[i].slice(1));\n  }\n  return newArr.join(\" \");\n  \n}\n\nconsole.log(individualRole, \"this is individual role\")\n\nconst totalFunc = () => {\n  if (individualRole === undefined || individualRole.number.length < 1) {\n    return 0;\n  }\n  if (individualRole.number.length > 0) {\n    let total = 0\n   for (let i = 0; i < individualRole.number.length; i++) {\n     total = total + individualRole.number[i]\n   }\n    return total;\n  } else {\n    return 0;\n  }\n\n}\n\n\n  return (\n    <>\n    {!playerStats && <div className='char-Container'>\n      <div className=\"empty-character\">\n        <h1 className=\"update-char-name\">{correctName}</h1>\n        <h1 className=\"update-stats-h1\">UPDATE YOUR STATS!</h1>\n        <div className=\"stats-directions\">\n          <p>CLICK THE CHARACTER ICON ON RIGHT SIDE NAVIGATION TOOL</p>\n          <GiIciclesAura style={{height: \"3rem\", width: \"auto\"}}/>\n          <p>IF YOU NEED HELP WITH ANY OTHER PART OF THE USER INTERFACE, CLICK THE TUTORIAL ICON</p>\n          <MdLiveHelp style={{height: \"3rem\", width: \"auto\"}} />\n        </div>\n\n      </div>\n      </div>}\n\n\n    {playerStats &&  <div className='char-Container'>\n      {/* <button onClick={() => console.log(playerStats)}>CharacterInfo</button> */}\n      <div className=\"player-container-1\">\n        <div className=\"player-front-portrait\">\n          <img alt=\"\" src={partyData[name].text.portrait}></img>\n        </div>\n        <h1>{correctName}</h1>\n        </div>\n\n\n\n\n\n      <div className=\"player-container-2\">\n        <div className='player-stat-holder'>\n          <div className='stats-1'>\n\n            <p>HP {playerStats.text.hp}</p>  \n            <p>AC {playerStats.text.ac}</p>\n            <p>Melee+ {playerStats.text.melee}</p>\n            <p>Ranged+ {playerStats.text.ranged}</p>\n            <p>P.P. +</p>\n            <p>P.I. +</p>\n          </div>\n          <div className='stats-2'> \n            <p>Str+ {playerStats.text.str}</p>\n            <p>Dex+ {playerStats.text.dex}</p>\n            <p>Con+ {playerStats.text.con}</p>\n            <p>Wis+ {playerStats.text.wis}</p>\n            <p>Int+ {playerStats.text.int}</p>\n            <p>Con+ {playerStats.text.cha}</p>\n          </div>\n        </div>\n        <div className='player-dice-display'>\n          <h1 className=\"player-display-roll-text\">Recent Dice Roll</h1>\n          {!isLoading && <div className='player-dice-box'>\n\n             {individualRole && individualRole.number.length > 0 && individualRole.number.map((number, index) => <div className=\"char-roll-circle\"><p>{number}</p></div>)}\n            {/* <button onClick={() => console.log(playerRoll.number)}>Click</button> */}\n          </div>}\n          {isLoading && <DiceLoad/>}\n          {!isLoading && individualRole && individualRole.number.length > 0 && <div className=\"charDice-totals\"><h2 className=\"charDice-heading\">TOTAL</h2><div className=\"char-roll-circle\"><h2 style={{fontSize: \"1rem\", marginTop: \"19px\"}}>{totalFunc()}</h2></div></div>}\n        </div>\n\n      \n      </div>\n    </div>}\n    </>\n  )\n}\n\nexport default Character;","/Users/scottbillings/Desktop/TableTopUI/src/Components/Modal/NotificationModal.js",["196"],"import React from 'react'\nimport { CSSTransition } from 'react-transition-group'\nimport Backdrop from '../Navigation/BackDrop'\nimport ReactDOM from 'react-dom';\nimport './NotificationModal.css'\n\nconst NotificationModalOverlay = (props) => {\n  const content = (\n    <div className=\"notification-modal\">\n      \n      <header className=\"notification-modalHeader\">\n        <h2>{props.header}</h2>\n      </header>\n      {/* <form\n        onSubmit={\n          props.onSubmit ? props.onSubmit : (event) => event.preventDefault()\n        }\n      > */}\n        <div className=\"notification-modalContent\">{props.children}</div>\n        <footer className=\"notification-modalFooter\">{props.footer}</footer>\n      {/* </form> */}\n    </div>\n  );\n  return ReactDOM.createPortal(content, document.getElementById('notification-hook'));\n  }\n\n  const NotificationModal = (props) => {\n    return (\n      <>\n        {/* {props.show && <Backdrop onClick={props.onCancel} />} */}\n        <CSSTransition\n          in={props.show}\n          mountOnEnter\n          unmountOnExit\n          timeout={200}\n          classNames=\"notification-modal\"\n        >\n          <NotificationModalOverlay {...props}  />\n        </CSSTransition>\n      </>\n    );\n  };\n  \n  export default NotificationModal;\n\n","/Users/scottbillings/Desktop/TableTopUI/src/Components/Navigation/Exit.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Navigation/SideBar.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Reusable/FrontDropDown.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Navigation/BackDrop.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/DiceLoad.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Navigation/PostDrawer.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Navigation/SideDrawer.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Navigation/MapDrawer.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Navigation/DiceDrawer.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/InputBar.js",["197","198","199","200","201"],"import React, { useState, useEffect } from 'react';\nimport Dice from '../Resources/toppng.com-emini-polyhedral-black-green-gold-x7-green-black-rpg-dice-436x397.png';\nimport DiceRoll from './DiceRoll';\nimport './InputBar.css';\n\nconst InputBar = ({stats, setStats, name, sendPlayerData, sendPlayerRoll }) => {\n\n  const [playerIconPreview, setPlayerIconPreview] = useState(\"\")\n  const [correctName, setCorrectName] = useState(\"\")\n  \n  useEffect(() => {\n    setCorrectName(newName())\n  })\n  // const  setDiceRoll = async (roll) => {\n  //   await setStats({...stats, dice: roll})\n  //   // sendPlayerData()\n  // }\n  const newName = () => {\n    let arr = name.split(\" \")\n    let newArr = []\n    for (let i=0; i<arr.length; i++){\n      newArr.push (arr[i].charAt(0).toUpperCase() + arr[i].slice(1));\n    }\n    return newArr.join(\" \");\n    \n  }\n  \n\n\n  return (\n  <form className=\"inputBarContainer\" onSubmit={sendPlayerData}>\n\n    <div className=\"charBox3\">\n      {stats.portrait && <img src={stats.portrait} alt=\"Portrait\"></img>}\n      {!stats.portrait && <p>INPUT URL OF CHARACTER PORTRAIT DOWN BELOW</p>}\n\n    </div>\n\n    <div className=\"charBox1\">\n\n    <div className=\"input-character-name\">\n      <h1>{correctName}</h1>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Hit Points</p>\n      <div class=\"plus-box-holder\">\n        {/* <p className=\"plus\">+</p> */}\n    <input \n    className=\"charInput\"\n    value={stats.hp}\n    onChange={(event) => setStats({...stats, hp: event.target.value})}\n    // value={props.playerData}\n    // onChange={(event) => props.setPlayerData(event.target.value)}\n    // onKeyPress={event => event.key === 'Enter' ? props.sendPlayerData(event) : null}\n    >\n    </input>\n\n      </div>\n    </div>\n\n\n    <div className=\"charInputDiv\">\n      <p>Armor Class</p>\n      <div className=\"plus-box-holder\">\n      {/* <p className=\"plus\">+</p> */}\n      <input className=\"charInput\"\n        value={stats.ac}\n        onChange={(event) => setStats({...stats, ac: event.target.value})}\n      >\n      </input>\n\n      </div>\n      {/* <button onClick={() => console.log(stats)}>ShowState</button> */}\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Melee Bonus</p>\n      <div className=\"plus-box-holder\">\n      <p className=\"plus\">+</p>\n      <input className=\"charInput\"\n      value={stats.melee}\n      onChange={(event) => setStats({...stats, melee: event.target.value})}\n      ></input>\n      </div>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Ranged Bonus</p>\n      <div className=\"plus-box-holder\">\n      <p className=\"plus\">+</p>\n      <input className=\"charInput\"\n      value={stats.ranged}\n      onChange={(event) => setStats({...stats, ranged: event.target.value})}\n      ></input>\n      </div>\n    </div>\n\n    \n    {/* </div>\n\n  <div className=\"charBox2\"> */}\n\n    <div className=\"charInputDiv\">\n      <p>Strength Save</p>\n      <div className=\"plus-box-holder\">\n      <p className=\"plus\">+</p>\n      <input className=\"charInput\"\n      value={stats.str}\n      onChange={(event) => setStats({...stats, str: event.target.value})}\n      ></input>\n      </div>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Dexterity Save</p>\n      <div className=\"plus-box-holder\">\n      <p className=\"plus\">+</p>\n      <input className=\"charInput\"\n      value={stats.dex}\n      onChange={(event) => setStats({...stats, dex: event.target.value})}\n      ></input>\n      </div>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Constitution Save</p>\n      <div className=\"plus-box-holder\">\n      <p className=\"plus\">+</p>\n      <input className=\"charInput\"\n      value={stats.con}\n      onChange={(event) => setStats({...stats, con: event.target.value})}\n      ></input>\n      </div>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Intelligence save</p>\n      <div className=\"plus-box-holder\">\n      <p className=\"plus\">+</p>\n      <input className=\"charInput\"\n      value={stats.int}\n      onChange={(event) => setStats({...stats, int: event.target.value})}\n      ></input>\n      </div>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Wisdom Save</p>\n      <div className=\"plus-box-holder\">\n      <p className=\"plus\">+</p>\n      <input className=\"charInput\"\n      value={stats.wis}\n      onChange={(event) => setStats({...stats, wis: event.target.value})}\n      ></input>\n      </div>\n    </div>\n\n    <div className=\"charInputDiv\">\n      <p>Charisma Save</p>\n      <div className=\"plus-box-holder\">\n      <p className=\"plus\">+</p>\n      <input className=\"charInput\"\n      value={stats.cha}\n      onChange={(event) => setStats({...stats, cha: event.target.value})}\n      ></input>\n      </div>\n    </div>\n\n    <div className=\"charInputDiv_image\">\n      <p style={{color: \"black\", fontWeight: \"bold\"}}>Portrait URL</p>\n      <input className=\"charInput_image\"\n      value={stats.portrait}\n      onChange={(event) => setStats({...stats, portrait: event.target.value})}>\n        \n      </input>\n      <p className=\"portrait-explanation\">Right click any image from the web and paste it in this box for your character portrait</p>\n    </div>\n\n\n    <div className=\"submit-stats-container\">\n      <button className=\"submit-stats\" type=\"button\" onClick={sendPlayerData} >Update Stats</button>\n    </div>\n  </div>\n\n\n    {/* <div className=\"charBox4\">\n      <img id=\"diceImage\" src={Dice} alt=\"dice\"></img>\n\n    </div>\n\n\n    <DiceRoll sendPlayerRoll={sendPlayerRoll} setStats={setStats} sendPlayerData={sendPlayerData}/>\n  <button className='sendButton' type='submit'>Set Stats</button> */}\n  </form>\n\n  \n  )\n  \n}\n\nexport default InputBar","/Users/scottbillings/Desktop/TableTopUI/src/Components/Messaging/Messaging.js",["202","203","204"],"import React, {useState, useEffect} from 'react';\nimport './Messaging.css';\nimport MessageDisplay from './MessageDisplay';\nimport DropDowns from './DropDowns';\nimport MessageInput from './MessageInput';\nimport MessageDropdown from '../Reusable/MessageDropDown';\n\n\n\n\nconst Messaging = ({setMessage, sendPlayerMessage, message, setRecipients, users, recipients, messages, name, unreadMessages, setUnreadMessages, partyData}) => {\n\n  useEffect(() => {\n    return () => {\n      setRecipients([name])\n      // console.log(recipients)\n    }\n  },[setRecipients, name])\n\n  useEffect(() => {\n    setUnreadMessages(0)\n  }, [])\n\n  //this clears the recipients when they close the drawer (unmount) otherwise it will cause all kinds of issues \n  \n\n\n  return(\n    <div className=\"messaging-container\">\n    <DropDowns users={users} setRecipients={setRecipients} recipients={recipients} name={name} partyData={partyData}/>\n    {/* <MessageDropdown items={users} name={name} singleState={recipients} setSingleState={setRecipients} title=\"CHOOSE RECIPIENTS\"/> */}\n    <MessageDisplay messages={messages} name={name}/>\n    <MessageInput setMessage={setMessage} sendPlayerMessage={sendPlayerMessage} message={message} recipients={recipients}/>\n\n    </div>\n  )\n}\n\nexport default Messaging","/Users/scottbillings/Desktop/TableTopUI/src/Components/Maps/WorldMap.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/NPC/NPCDisplay.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Dice/Dice.js",["205"],"import React, {useState} from 'react'\nimport './Dice.css';\nimport DiceRoll from '../DiceRoll'\nimport DicePic from '../../Resources/toppng.com-emini-polyhedral-black-green-gold-x7-green-black-rpg-dice-436x397.png'\n\n\nconst Dice = ({sendPlayerRoll}) => {\n  return (\n    <div className=\"dice-container\">\n      <div className=\"dice-picture-container\">\n        <img src={DicePic} alt=\"\"></img>\n      </div>\n      <DiceRoll sendPlayerRoll={sendPlayerRoll} />\n\n    </div>\n  )\n}\n\nexport default Dice;","/Users/scottbillings/Desktop/TableTopUI/src/Components/Combat/Combat.js",["206"],"import React, { useEffect, useState, useRef } from 'react';\nimport './Combat.css';\nimport MonsterCreator from './MonsterCreator';\nimport { GiPieceSkull } from 'react-icons/gi';\nimport PlayerInitiative from './PlayerInitiative';\nimport Draggable from 'react-draggable';\n\nconst Combat = ({\n  users,\n  partyPosition,\n  name,\n  array,\n  monsterData,\n  sendMonsterInfo,\n  clearMonsterInfo,\n  clearPlayerPosition,\n  combatMap,\n  partyData,\n  partyRolls,\n  showNotification,\n}) => {\n  const [newMonsterData, setNewMonsterData] = useState(\n    monsterData ? [...monsterData] : []\n  );\n\n  const [newPartyPosition, setNewPartyPosition] = useState(\n    partyPosition ? [...partyPosition] : []\n  );\n  const [activeMonster, setActiveMonster] = useState();\n\n  useEffect(() => {\n    if (monsterData) {\n      setNewMonsterData([...monsterData]);\n    } else {\n      setNewMonsterData([]);\n    }\n  }, [monsterData]);\n\n  useEffect(() => {\n    if (partyPosition) {\n      setNewPartyPosition([...partyPosition]);\n    } else {\n      setNewPartyPosition([]);\n    }\n  }, [partyPosition]);\n\n  const endMonsterTurn = () => {\n    sendMonsterInfo(newMonsterData);\n    showNotification('Monster Movement Sent');\n    console.log('end monster turn fired');\n  };\n\n\n\n  return (\n    <div className=\"combat-outer-border\">\n      <PlayerInitiative\n        partyData={partyData}\n        partyRolls={partyRolls}\n        users={users}\n      />\n\n      <div id=\"contentContainer\">\n        {newMonsterData &&\n          monsterData &&\n          newMonsterData.sort((a, b) => a.value - b.value).map((monster, index) => (\n            <Draggable\n              bounds=\"parent\"\n              onDrag={(e, ui) => {\n                const x = monster.xPosition;\n                const y = monster.yPosition;\n\n                let updatedList = newMonsterData.map((item) => {\n                  if (monster.value === item.value) {\n                    return {\n                      ...item,\n                      xPosition: x + ui.deltaX,\n                      yPosition: y + ui.deltaY,\n                    };\n                  } else {\n                    return item;\n                  }\n                });\n\n                setNewMonsterData(updatedList);\n              }}\n              defaultClassName=\"absolute\"\n              defaultPosition={{ x: monster.xPosition, y: monster.yPosition }}\n            >\n              <div className={`drag-wrapper ${monster.size}`}>\n                {monster.dead === true ? (\n                  <div className=\"drag-pic-wrapper\">\n                  <GiPieceSkull className=\"dead-token\" />\n                  </div>\n                ) : (\n                  <div className=\"drag-pic-wrapper\">\n                  <img alt=\"\" src={monster.icon}></img>\n                  </div>\n                )}\n\n                <div className=\"monster-drag-cover\">{monster.value}</div>\n              </div>\n            </Draggable>\n          ))}\n\n        {newPartyPosition.filter((player) => player.name !== name)\n          .map((user, index) => (\n            <div\n              className={`${user.position.size} circle`}\n              key={user.name}\n              id={user.name}\n              style={{\n                left: `${user.position.x}px`,\n                top: `${user.position.y}px`,\n                position: 'absolute',\n                zIndex: `${array[index]}`,\n                borderRadius: '50%',\n                transition: 'left 0.5s ease-in, top 0.5s ease-in',\n              }}\n            >\n               <div className=\"drag-pic-wrapper\">\n                <img\n                  alt=\"\"\n                  src={user.icon}\n                  className=\"youSuck\"\n                ></img>\n                </div>\n                <div className=\"party-drag-cover\"></div>\n              \n            </div>\n          ))}\n\n        {combatMap && (\n          <img className=\"combat-image\" alt=\"\" src={combatMap}></img>\n        )}\n      </div>\n\n      <MonsterCreator\n        sendMonsterInfo={sendMonsterInfo}\n        monsterData={monsterData}\n        setActiveMonster={setActiveMonster}\n        newMonsterData={newMonsterData}\n        setNewMonsterData={setNewMonsterData}\n        endMonsterTurn={endMonsterTurn}\n        clearMonsterInfo={clearMonsterInfo}\n        clearPlayerPosition={clearPlayerPosition}\n        activeMonster={activeMonster}\n        showNotification={showNotification}\n      />\n    </div>\n  );\n};\n\nexport default Combat;\n","/Users/scottbillings/Desktop/TableTopUI/src/Components/Post/Post.js",["207"],"import React, {useState} from 'react'\nimport './Post.css';\n\nconst Post = (props) => {\n  const [tempWorld, setTempWorld] = useState(\"\")\n  const [tempChar, setTempChar] = useState({portrait: \"\", name: \"\"})\n  const [tempCombatMap, setTempCombatMap] = useState('')\n  // const [tempCharName, setTempCharName] = useState(null)\n\n  // NEXT THING TO DO build out tempCombatMap and use setCombatMap from props to send\n  \n\n  const newMapHandler = () => {\n    if(tempWorld !== \"\") {props.sendMapData(tempWorld)\n      props.showNotification('Map Was Posted!')\n      console.log(\"should be firing\")\n    }\n    setTempWorld(\"\");\n    document.getElementById(\"mapInput\").value = \"\"\n    console.log(`new map handler is working ${tempWorld} is map`)\n  }\n\n  const newNPCHandler = () => {\n    if(tempChar.name && tempChar.portrait !== \"\") {props.sendNPCData(tempChar)\n      props.showNotification('New NPC Was Added!')\n      console.log(\"should be firing\")\n    }\n    setTempChar({portrait: \"\", name: \"\"})\n    document.getElementById(\"portrait-input\").value = \"\"\n    document.getElementById(\"npc-name-input\").value = \"\"\n  }\n\n  const newCombatHandler = () => {\n    if(tempCombatMap !== '') {props.sendCombatMap(tempCombatMap)\n      props.showNotification('Combat Map Was Added!')\n      console.log(\"should be firing\")\n    \n    }\n    setTempCombatMap('')\n    document.getElementById('battle-map-input').value = \"\"\n  }\n\n  const checkState = () => {\n    console.log(tempChar)\n  }\n\n  return(\n    <div className=\"postContainer\">\n      <div className=\"worldContainer\">\n      <h1>POST A MAP</h1>\n      <input id=\"mapInput\" placeholder=\"Map URL\" className=\"mapInput\" type=\"text\" value={tempWorld} onChange={(event) => setTempWorld(event.target.value)}></input>\n      <p className=\"postDescription\">Right click any image from the web and click \"copy image location\", then paste the link above. Once submitted this will be the current world map for your adventure and will be displayed in the \"Maps\" tab </p>\n      <div className=\"worldButtonContainer\"><button className=\"worldSubmitButton\" onClick={newMapHandler}>SET MAP</button></div>\n      {tempWorld && <div className=\"mapPrev\"><img src={tempWorld} alt=\"\" /></div>}\n      </div>\n\n      <div className=\"portraitContainer\">\n        <h1>POST AN NPC</h1>\n        <input id=\"portrait-input\" placeholder=\"Portrait URL\" className=\"portraitInput\" type=\"text\" value={tempChar.portrait} onChange={(event) => setTempChar({...tempChar, portrait: event.target.value})}></input>\n        <input id=\"npc-name-input\" placeholder=\"Name\" className=\"portraitInput\" type=\"text\" value={tempChar.name} onChange={(event) => setTempChar({...tempChar, name:event.target.value})}></input>\n        <p className=\"postDescription\">Right click any image from the web and click \"copy image location\", then paste the link above. This will be the current portrait for your new NPC. Second, give them a name. Once submitted you will find your NPC under the \"NPC\" tab. </p>\n        <div className=\"portraitButtonContainer\"><button className=\"portraitSubmitButton\" onClick={newNPCHandler}>CREATE NPC</button></div>\n        {/* <div className=\"portraitButtonContainer\"><button className=\"portraitSubmitButton\" onClick={checkState}>Check state</button></div> */}\n        {tempChar && <div className=\"portraitPreview\"><img src={tempChar.portrait} alt=\"\" /></div>}\n        {/* {tempCharArray !== [] && <div className=\"portraitListContainer\">Pictures of Stuff</div> } */}\n        \n      </div>\n\n      <div className=\"battle-map-post-container\">\n        <h1>POST A COMBAT MAP</h1>\n        <input id=\"battle-map-input\" placeholder=\"Battle Map URL\" className=\"mapInput\" type=\"text\" value={tempCombatMap} onChange={(event) => setTempCombatMap(event.target.value)}></input>\n        <p className=\"postDescription\">Right click any image from the web and click \"copy image location\", then paste the link above. This will be the current combat map for your adventure and will be displayed in the \"Combat\" tab </p>\n        <div className=\"worldButtonContainer\"><button className=\"worldSubmitButton\" onClick={newCombatHandler}>SET COMBAT MAP</button></div>\n        {tempCombatMap && <div className=\"mapPrev\"><img src={tempCombatMap} alt=\"URL Not Valid\"/></div>}\n\n      </div>\n\n\n      \n\n    </div>\n  )\n}\nexport default Post;","/Users/scottbillings/Desktop/TableTopUI/src/Components/Combat/PlayerCombat.js",["208"],"import React, { useEffect, useState, useRef } from 'react';\n\nimport './Combat.css';\n\nimport { GiPieceSkull } from 'react-icons/gi';\nimport PlayerMovement from './PlayerMovement';\nimport PlayerInitiative from './PlayerInitiative';\nimport Draggable from 'react-draggable';\n\nconst Combat = ({\n  sendPlayerPosition,\n  users,\n  partyPosition,\n  name,\n  array,\n  monsterData,\n  role,\n  stats,\n  combatMap,\n  partyData,\n  partyRolls,\n  partyStats,\n  sendPlayerRoll,\n}) => {\n  const [newMonsterData, setNewMonsterData] = useState(\n    monsterData ? [...monsterData] : []\n  );\n\n  const [playerSize, setPlayerSize] = useState(\n    partyPosition && partyPosition[partyPosition.find((x) => x.name === name)]\n      ? partyPosition[partyPosition.find((x) => x.name === name)].position.size\n      : 'small'\n  );\n\n  const [newPartyPosition, setNewPartyPosition] = useState(\n    partyPosition ? [...partyPosition] : []\n  );\n\n  useEffect(() => {\n    if (monsterData) {\n      setNewMonsterData([...monsterData]);\n    } else {\n      setNewMonsterData([]);\n    }\n  }, [monsterData]);\n\n  useEffect(() => {\n    if (partyPosition) {\n      setNewPartyPosition([...partyPosition]);\n    } else {\n      setNewPartyPosition([]);\n    }\n  }, [partyPosition]);\n\n \n\n  const [playerLocation, setPlayerLocation] = useState(\n    partyPosition && partyPosition.find((x) => x.name === name)\n      ? partyPosition.find((x) => x.name === name).position\n      : { x: 50, y: 50 }\n  );\n\n  const endTurn = () => {\n    let position = {\n      x: playerLocation.x,\n      y: playerLocation.y,\n      size: playerSize,\n    };\n    console.log(position);\n    sendPlayerPosition(position);\n    console.log(partyPosition);\n  };\n\n  return (\n    <div className=\"combat-outer-border\">\n      {/* <button onClick={wtfIsGoingOn}>CHeck for shit</button> */}\n      <PlayerInitiative\n        partyData={partyData}\n        partyRolls={partyRolls}\n        users={users}\n      />\n\n      <div id=\"contentContainer\">\n        {role && role !== 'DM' && playerLocation && (\n          <Draggable\n            bounds=\"parent\"\n            defaultClassName=\"absolute\"\n            defaultPosition={{ x: playerLocation.x, y: playerLocation.y }}\n            onDrag={(e, ui) => {\n              const x = playerLocation.x;\n              const y = playerLocation.y;\n\n              let updatedLocation = {\n                ...playerLocation,\n                x: x + ui.deltaX,\n                y: y + ui.deltaY,\n              };\n              setPlayerLocation(updatedLocation);\n            }}\n          >\n            <div\n              className={\n                partyPosition &&\n                partyPosition.find((x) => x.name === name)\n                  ? ` drag-wrapper ${\n                      partyPosition.find((x) => x.name === name).position.size\n                    }`\n                  : ' drag-wrapper small'\n              }\n            >\n              <div className=\"drag-pic-wrapper\">\n              <img alt=\"\" src={stats.portrait}></img>\n\n              </div>\n              <div className=\"drag-cover\"></div>\n            </div>\n          </Draggable>\n        )}\n\n        {newMonsterData && monsterData &&\n          newMonsterData.map((monster) => (\n            <div className=\"absolute\"   style={{\n              left: `${monster.xPosition}px`,\n              top: `${monster.yPosition}px`,\n            }}>\n            <div\n              id={monster.id}\n              key={monster.id}\n              className={`drag-wrapper ${monster.size}`}\n              \n            >\n              {monster.dead === true ? (\n                <div className=\"drag-pic-wrapper\">\n                  <GiPieceSkull className=\"dead-token\" />\n\n                </div>\n              ) : (\n                <div className=\"drag-pic-wrapper\">\n                  <img alt=\"\" src={monster.icon}></img>\n\n                </div>\n              )}\n                       <div className=\"monster-drag-cover\"></div>\n              </div>\n            </div>\n          ))}\n\n        {/* {Object.keys(partyPosition).filter(player => player !== name).map((user, index) =>  <div \n          className={`${partyPosition[user].position.size} circle`}\n          key={user} \n          id={user}  \n          style={{left: `${partyPosition[user].position.x}px`, \n                  top: `${partyPosition[user].position.y}px`, \n                  position: \"absolute\", \n                  zIndex: `${array[index]}`,\n                  borderRadius: \"50%\" ,\n                  transition: \"left 0.5s ease-in, top 0.5s ease-in\"}} \n           \n          >\n            {partyData[user] && <img \n          alt=\"\" \n          src={partyData[user].text.portrait}\n          className=\"youSuck\"\n          >\n          </img>}\n          </div> )} */}\n\n        {newPartyPosition.filter((player) => player.name !== name)\n          .map((user, index) => (\n            <div\n              className={`${user.position.size} circle`}\n              key={user.name}\n              id={user.name}\n              style={{\n                left: `${user.position.x}px`,\n                top: `${user.position.y}px`,\n                position: 'absolute',\n                zIndex: `${array[index]}`,\n                borderRadius: '50%',\n                transition: 'left 0.5s ease-in, top 0.5s ease-in',\n              }}\n            >\n              {partyData[index] && (\n                <img\n                  alt=\"\"\n                  src={partyData[user.name].text.portrait}\n                  className=\"youSuck\"\n                ></img>\n              )}\n            </div>\n          ))}\n\n        {combatMap && (\n          <img className=\"combat-image\" alt=\"\" src={combatMap}></img>\n        )}\n      </div>\n\n      <PlayerMovement\n        endTurn={endTurn}\n        stats={stats}\n        partyPosition={partyPosition}\n        setPlayerSize={setPlayerSize}\n        playerSize={playerSize}\n        partyData={partyData}\n        name={name}\n        sendPlayerRoll={sendPlayerRoll}\n      />\n    </div>\n  );\n};\n\nexport default Combat;\n","/Users/scottbillings/Desktop/TableTopUI/src/Components/DiceRoll.js",["209","210"],"import React, { useState } from 'react';\nimport './DiceRoll.css';\nimport diceSound from  '../Resources/diceRoll.mp3';\nimport {Howl, Howler} from 'howler';\nimport { BsReverseLayoutSidebarInsetReverse } from 'react-icons/bs';\n\nconst DiceRoll = ({sendPlayerRoll}) => {\n  const [result, setResult] = useState(null)\n  const [type, setType] = useState(4)\n  const [number, setNumber] = useState(1)\n  \n\n  const audioClips = [\n    {sound: diceSound, label: \"dice\"}\n  ]\n\n\n  const diceOptions = [\n    {\n      label: \"D4\",\n      value: 4\n    },\n    {\n      label: \"D6\",\n      value: 6\n    },\n    {\n      label: \"D8\",\n      value: 8\n    },\n    {\n      label: \"D10\",\n      value: 10\n    },\n    {\n      label: \"D12\",\n      value: 12\n    },\n    {\n      label: \"D20\",\n      value: 20\n    },\n\n  ]\n\n  const diceCount = [\n    {\n      label: 1,\n      value: 1\n    },\n    {\n      label: 2,\n      value: 2\n    },\n    {\n      label: 3,\n      value: 3\n    },\n    {\n      label: 4,\n      value: 4\n    },\n    {\n      label: 5,\n      value: 5\n    },\n    {\n      label: 6,\n      value: 6\n    },\n  ]\n\n  const handleType = (event) => {\n    setType(event.target.value)\n  }\n\n  const handleNumber = (event) => {\n    setNumber(event.target.value)\n  }\n\n  const diceMaths = () => {\n    let numArr = []\n    if (number > 1) {\n      for (let i = 1;  i <= number; i++) {\n        numArr.push(Math.floor(Math.random() * type) + 1)\n        \n      }\n    } else {\n\n      numArr.push(Math.floor(Math.random() * type) + 1)\n      \n    }\n    setResult(numArr);\n    sendPlayerRoll(numArr)\n    diceFunc(audioClips[0].sound)\n    // console.log(diceVal);\n  }\n\n  const diceFunc = (src) => {\n    const sound = new Howl({\n      src\n    })\n    sound.play();\n  }\n\n  const clearRoll = () => {\n    setResult(null);\n    setType(4);\n    setNumber(1);\n   \n  }\n\n  const totalFunc = () => {\n    if (!result || result.length < 1) {\n      return 0;\n    }\n    if (result.length > 0) {\n      let total = 0\n     for (let i = 0; i < result.length; i++) {\n       total = total + result[i]\n     }\n      return total;\n    } else {\n      return 0;\n    }\n\n  }\n\n  return (\n    <div className=\"diceRollContainer\">\n      <div className=\"diceSelectContainer\">\n      <div className=\"custom-select\">\n        <select className=\"diceSelect\" onChange={handleType} value={type}>\n          {diceOptions.map((option) => (\n            <option key={option.value} value={option.value}>{option.label}</option>\n          ))}\n        </select>\n        <span className=\"custom-arrow\" />\n      </div>\n\n      <div className=\"custom-select\">\n        <select className=\"diceSelect\" onChange={handleNumber} value={number}>\n          {diceCount.map((count) => (\n            <option key={count.value }value={count.value}>{count.label}</option>\n          ))}\n        </select>\n        <span className=\"custom-arrow\" />\n      </div>\n      </div>\n      <p className=\"rollInstructions\">Select the type of dice to roll followed by the number of dice</p>\n      <div className=\"diceButtonContainer\">\n        <button type=\"button\" onClick={clearRoll}>CLEAR</button>\n        <button type=\"button\" onClick={diceMaths}>ROLL DICE</button>\n      </div>\n      <div className=\"diceResultContainer\">\n            <div className=\"diceResultBackground\">\n          {result &&  result.map((roll, index) => <div className=\"roll_container\"><h1>{roll}</h1></div>)}\n          \n            </div>\n            {(result && result.length > 0) && <div style={{display:\"flex\", alignItems: \"center\", flexDirection: \"column\"}}><p>TOTAL</p><div className=\"roll_container\"><h1 style={{fontSize: \"1rem\"}}>{totalFunc()}</h1></div></div>}\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default DiceRoll;","/Users/scottbillings/Desktop/TableTopUI/src/Components/Messaging/MessageDisplay.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Messaging/MessageInput.js",["211"],"import React, {useState, useEffect} from 'react'\nimport './MessageInput.css';\nimport Modal from '../../Components/Modal/Modal'\n\nconst MessageInput = ({message, setMessage, sendPlayerMessage, recipients}) => {\n  const [modal, setModal] = useState(false)\n\n  const showModal = () => {\n    setModal(!modal)\n  }\n\n\n  const sendMessage = (e) => {\n    e.preventDefault()\n    if (recipients.length < 2) {\n      showModal()\n    } else {\n      sendPlayerMessage(e)\n    }\n\n  }\n\n  return(\n    <>\n    <Modal \n    modalStyle=\"skinny-modal\"\n    header=\"Please choose recipients before sending a message!\"\n    onCancel = {showModal}\n    children = {<button className=\"ok-error-button\" onClick={showModal}>Ok</button>}\n    show={modal === true}\n\n    \n    />\n    <form className=\"messaging-form\" onSubmit={sendMessage}>\n    <textarea\n      className=\"messaging-input\"\n      type=\"\"\n      placeholder=\"Type a message...\"\n      value={message}\n      onChange={({ target: { value } }) => setMessage(value)}\n      onKeyPress={event => event.key === 'Enter' ? sendPlayerMessage(event) : null}\n    />\n    <button className={message !== \"\" ? \"messaging-sendButton\" : \"messaging-sendButton-disabled\"} type=\"submit\">Send</button>\n  </form>\n    </>\n  )\n}\n\nexport default MessageInput;\n\n","/Users/scottbillings/Desktop/TableTopUI/src/Components/Messaging/DropDowns.js",["212"],"import React, {useState, useEffect} from 'react';\nimport './DropDowns.css';\nimport {MdExpandMore} from 'react-icons/md';\n\nconst DropDowns = ({users, setRecipients, recipients, name, partyData}) => {\nconst [drop1Extended, setDrop1Extended] = useState(false)\nconst [drop2Extended, setDrop2Extended] = useState(false)\nconst [userArray, setUserArray] = useState()\n\n\n\nuseEffect(() => {\n  setUserArray(users.filter(user => user.name !== name))\n},[name, users])\n\n\n  const showDropDown = () => {\n    if (drop1Extended) {\n      setDrop1Extended(false)\n    }\n    if (!drop1Extended) {\n      setDrop1Extended(true)\n    }\n  }\n\n  const showDropDown2 = () => {\n    if (drop2Extended) {\n      setDrop2Extended(false)\n    }\n    if (!drop2Extended) {\n      setDrop2Extended(true)\n    }\n  }\n\n  \n\n  const handleCheckboxChange = (event) => {\n    \n    let newArray = [...recipients, event.target.id];\n    if (recipients.includes(event.target.id)) {\n      newArray = newArray.filter(user => user !== event.target.id)\n    }\n    setRecipients(newArray)\n   \n  }\n\n  return (\n    <div className=\"dropdown-container\" onMouseLeave={() => setDrop2Extended(false)}>\n      <form>\n       \n\n\n        <div className='multi-select2'>\n          <div className=\"select-box\" onClick={showDropDown2}>\n          <select>\n            <options>Select Players</options>\n          </select>\n            <div className=\"over-select\"><p>SELECT RECIPIENTS</p><MdExpandMore className={drop2Extended ? \"down-drop rotated\" : \"down-drop\"}/></div>\n          </div>\n          <div id={drop2Extended ? \"check-boxes-expanded\" : \"check-boxes\"} >\n          {users && userArray && userArray.map((user) => <label  key={user.id} for={user.name}>\n            <div className=\"check-name-wrapper\">\n            <input className=\"recipient-check-box\" type=\"checkbox\" id={user.name} onChange={handleCheckboxChange}/>\n              <p className=\"recipient-name-list\">{user.name}</p>\n              </div>\n              <div className=\"checklist-portrait\">\n                {user.role === \"dm\" && <img src=\"https://res.cloudinary.com/dbnapmpvm/image/upload/v1641933882/Dungeons%20and%20Dragons/AdobeStock_337670650_copy_qjmtlr.jpg\" alt=\"DM\" />}\n                {partyData[user.name] &&\n                <img src={partyData[user.name].text.portrait} alt=\"\"/>}\n              </div>\n              </label>)}\n\n          \n          \n            \n\n          </div>\n\n\n        </div>\n      </form>\n\n    </div>\n  )\n}\n\nexport default DropDowns;","/Users/scottbillings/Desktop/TableTopUI/src/Components/Combat/MonsterCreator.js",["213","214","215"],"/Users/scottbillings/Desktop/TableTopUI/src/Components/NPC/NPC.js",["216"],"import React, {useState, useEffect} from 'react';\nimport './NPC.css';\nimport ScrollToBottom from 'react-scroll-to-bottom';\n\n\nconst NPC = ({item, deleteNPCData, sendNPCNote, notePost, setNotePost, npcNotes, role, stupidHack, notes}) => {\n  \n  const [displayNotes, setDisplayNotes] = useState(false);\n\n\n\n\n\n  const notesHandler = () => {\n    setDisplayNotes(true)\n  }\n\n  const protraitHandler = () => {\n    setDisplayNotes(false)\n  }\n\n  const deleteHandler = () => {\n    deleteNPCData(item.name)\n  }\n\n  const noteHandler = async() => {\n     if (notePost !== \"\") {  \n     sendNPCNote(item.name)\n    }\n    document.getElementById(\"noteInput\").value = \"\"\n  }\n\n\n  return( \n    <div className=\"npc-card\">\n\n      {displayNotes && \n      <div className=\"scroll-hate\">\n        <h1 className=\"notes-header\">Notes about {item.name} </h1>\n      <ScrollToBottom className=\"npc-notes-container\">\n        {notes && notes.map((note, index) => (<li key={index}>{note.note}</li>) )}\n        \n        {notes && notes === {} && <h1>Enter Text Below To Leave Notes About This NPC</h1>}\n      </ScrollToBottom>\n      </div>}\n      {displayNotes &&\n        <div className=\"npc-notes-input-container\">\n        <textarea id=\"noteInput\" className=\"npc-notes-input\" placeholder=\"Add a new note\" onChange={(event) => setNotePost(event.target.value)}>\n\n        </textarea>\n        <button onClick={noteHandler}>POST NOTE</button>\n        </div>\n        \n      \n      }\n\n        \n\n      \n      {!displayNotes && <div className=\"npc-image\">\n      <h1 className=\"notes-header\" style={{marginTop: '0px', marginBottom: \"1rem\"}} >{item.name}</h1>\n        <img style={{marginBottom: \"1rem\"}} src={item.portrait} alt=\"\"></img>\n      </div>}\n      {role === \"DM\" && <button style={{marginTop: displayNotes === false ? \"1rem\" : \"0rem\"}} onClick={deleteHandler}>DELETE NPC</button>}\n      {!displayNotes && <button style={{marginTop: role === \"PLAYER\" ? \"1rem\" : \"0rem\"}} onClick={notesHandler}>NOTES</button>}\n      {displayNotes && <button onClick={protraitHandler}>PORTRAIT</button>}\n\n    </div>\n  )\n}\n\nexport default NPC","/Users/scottbillings/Desktop/TableTopUI/src/Components/Reusable/MessageDropDown.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Combat/PlayerMovement.js",["217","218"],"import React, {useState, useEffect} from 'react'\nimport './MonsterCreator.css';\nimport PlayerListItem from './PlayerListItem';\nimport DiceRoll from '../DiceRoll';\n\n\n\nconst PlayerMovement = ({endTurn, stats, partyPosition, setPlayerSize, playerSize, partyData, name, sendPlayerRoll}) => {\n  return (\n    <div className=\"monster-creator-container\">\n      \n      <div className=\"monster-list-container\">\n       <PlayerListItem stats={stats} setPlayerSize={setPlayerSize} playerSize={playerSize} partyData={partyData} name={name}/>\n       <div className=\"combatButton_container\" style={{backgroundColor: \"rgba(0, 0, 0, 0.733)\", marginTop: \"0px\"}}>\n        <button onClick={endTurn} className=\"minions-button\">CONFIRM MOVEMENT</button>\n\n       </div>\n        {/* <button onClick={() => {console.log(partyPosition)}} className=\"minions-button\">Party Position</button> */}\n      </div>\n      <div className=\"black-background\">\n      <DiceRoll sendPlayerRoll={sendPlayerRoll} />\n\n      </div>\n    </div>\n  )\n}\n\nexport default PlayerMovement;","/Users/scottbillings/Desktop/TableTopUI/src/Components/Combat/PlayerInitiative.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Messaging/Message.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Reusable/CustomDropdown.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Reusable/MonsterDropDown.js",["219","220","221","222"],"import React, { useState } from 'react';\nimport onClickOutside from 'react-onclickoutside';\nimport './MonsterDropDown.css';\nimport MonsterInputs from './MonsterInputs';\nimport {MdExpandMore} from 'react-icons/md';\n\nfunction Dropdown({ title, items, multiSelect = false, headingStyle, setSingleState, singleState, monsterGroup, setMonsterGroup}) {\n  const [open, setOpen] = useState(false);\n  const [selection, setSelection] = useState([]);\n  const toggle = () => setOpen(!open);\n  // Dropdown.handleClickOutside = () => setOpen(false);\n\n  function handleOnClick(item) {\n    console.log(\"lol i dont do anything\")\n    // if (!selection.some(current => current.id === item.id)) {\n    //   if (!multiSelect) {\n    //     setSelection([item]);\n    //     setSingleState([item]);\n     \n\n    //   } else if (multiSelect) {\n    //     setSelection([...selection, item]);\n    //     setSingleState([...singleState, item])\n    //   }\n    // } else {\n    //   let selectionAfterRemoval = selection;\n    //   selectionAfterRemoval = selectionAfterRemoval.filter(\n    //     current => current.id !== item.id\n    //   );\n    //   setSelection([...selectionAfterRemoval]);\n    //   setSingleState([...selectionAfterRemoval])\n    // }\n  }\n\n  function isItemInSelection(item) {\n    if (selection.some(current => current.id === item.id)) {\n      return true;\n    }\n    return false;\n  }\n\n  return (\n    <div className={`monster-drop-wrapper ${headingStyle}`}>\n      <div\n        tabIndex={0}\n        className={`monster-drop-header ${headingStyle}`}\n        role=\"button\"\n        onKeyPress={() => toggle(!open)}\n        onClick={() => toggle(!open)}\n      >\n        <div className='-monster-drop-header__title'>\n          <p className=\"monster-drop-header__title--bold\">{title}</p>\n        </div>\n        <div className=\"monster-drop-header__action\">\n        <MdExpandMore className={open ? \"down-drop rotated\" : \"down-drop\"}/>\n          {/* <p>{open ? 'Close' : 'Open'}</p> */}\n        </div>\n      </div>\n      {open && (\n        <ul className=\"monster-drop-list\">\n          {items.map(item => (\n            <li className=\"monster-drop-list-item\" key={item.id}>\n              <button >\n                <MonsterInputs item={item} items={items} monsterGroup={monsterGroup} setMonsterGroup={setMonsterGroup}/>\n                {/* <input type=\"text\" className=\"monster-input\" placeholder=\"Portrait URL\" />\n                <div className=\"monster-size-container\">\n                  <button>S</button>\n                  <button>M</button>\n                  <button>L</button>\n                </div> */}\n                {/* <span>{item.value}</span>\n                <span>{isItemInSelection(item) && 'Selected'}</span> */}\n              </button>\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n}\n\n// const clickOutsideConfig = {\n//   handleClickOutside: () => Dropdown.handleClickOutside,\n// };\n\n// export default onClickOutside(Dropdown, clickOutsideConfig);\n\nexport default Dropdown;\n","/Users/scottbillings/Desktop/TableTopUI/src/Components/Combat/MonsterListItem.js",["223"],"import React, {useState, useEffect} from 'react'\nimport './MonsterCreator.css';\nimport {GiPieceSkull} from 'react-icons/gi'\nimport { CgCloseR }  from 'react-icons/cg'\n\nconst MonsterListItem = ({monster, removeThisCrap, setActiveMonster, newMonsterData, setNewMonsterData, monsterStatusHandler, hack, setHack}) => {\n  const [dead, setDead] = useState(false)\n\n  return (\n    \n      <div className=\"monster-list-item-container\" draggable=\"true\" >\n        <div className=\"monster-item-image\">\n          {monster.dead === true && <GiPieceSkull className=\"dead-icon\" />}\n          {monster.dead === false && <img src={monster.icon} alt=\"\" />}\n        </div>\n        <div className=\"select-monster-container\">\n          <button onClick={() => {\n        removeThisCrap();\n        setActiveMonster(monster);\n        // does remove this crap need to be actually called here? does the onclick need an anonymous function?\n        \n        }}>\n            SELECT\n          </button>\n          </div>\n        <div className=\"monster-item-delete\" onClick={() => {\n          monsterStatusHandler(monster)\n          setHack(hack)\n          setDead(!dead)\n        }}>\n          <CgCloseR className=\"monster-delete-icon\"/>\n        </div>\n\n\n\n      </div>\n    \n\n  )\n}\n\nexport default MonsterListItem;","/Users/scottbillings/Desktop/TableTopUI/src/Components/Combat/PlayerListItem.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Reusable/MonsterInputs.js",[],"/Users/scottbillings/Desktop/TableTopUI/src/Components/Modal/Help/Help.js",["224"],{"ruleId":"225","replacedBy":"226"},{"ruleId":"227","replacedBy":"228"},{"ruleId":"229","severity":1,"message":"230","line":3,"column":8,"nodeType":"231","messageId":"232","endLine":3,"endColumn":18},{"ruleId":"229","severity":1,"message":"233","line":37,"column":9,"nodeType":"231","messageId":"232","endLine":37,"endColumn":18},{"ruleId":"229","severity":1,"message":"234","line":45,"column":9,"nodeType":"231","messageId":"232","endLine":45,"endColumn":18},{"ruleId":"229","severity":1,"message":"235","line":11,"column":16,"nodeType":"231","messageId":"232","endLine":11,"endColumn":22},{"ruleId":"229","severity":1,"message":"236","line":24,"column":10,"nodeType":"231","messageId":"232","endLine":24,"endColumn":14},{"ruleId":"229","severity":1,"message":"237","line":97,"column":22,"nodeType":"231","messageId":"232","endLine":97,"endColumn":35},{"ruleId":"238","severity":1,"message":"239","line":138,"column":6,"nodeType":"240","endLine":138,"endColumn":33,"suggestions":"241"},{"ruleId":"238","severity":1,"message":"242","line":169,"column":6,"nodeType":"240","endLine":169,"endColumn":11,"suggestions":"243"},{"ruleId":"238","severity":1,"message":"244","line":222,"column":6,"nodeType":"240","endLine":222,"endColumn":38,"suggestions":"245"},{"ruleId":"229","severity":1,"message":"246","line":467,"column":9,"nodeType":"231","messageId":"232","endLine":467,"endColumn":20},{"ruleId":"238","severity":1,"message":"247","line":27,"column":5,"nodeType":"240","endLine":27,"endColumn":22,"suggestions":"248"},{"ruleId":"229","severity":1,"message":"249","line":3,"column":8,"nodeType":"231","messageId":"232","endLine":3,"endColumn":16},{"ruleId":"229","severity":1,"message":"250","line":2,"column":8,"nodeType":"231","messageId":"232","endLine":2,"endColumn":12},{"ruleId":"229","severity":1,"message":"251","line":3,"column":8,"nodeType":"231","messageId":"232","endLine":3,"endColumn":16},{"ruleId":"229","severity":1,"message":"252","line":8,"column":10,"nodeType":"231","messageId":"232","endLine":8,"endColumn":27},{"ruleId":"229","severity":1,"message":"253","line":8,"column":29,"nodeType":"231","messageId":"232","endLine":8,"endColumn":49},{"ruleId":"238","severity":1,"message":"254","line":11,"column":3,"nodeType":"231","endLine":11,"endColumn":12,"suggestions":"255"},{"ruleId":"229","severity":1,"message":"256","line":1,"column":16,"nodeType":"231","messageId":"232","endLine":1,"endColumn":24},{"ruleId":"229","severity":1,"message":"257","line":6,"column":8,"nodeType":"231","messageId":"232","endLine":6,"endColumn":23},{"ruleId":"238","severity":1,"message":"258","line":22,"column":6,"nodeType":"240","endLine":22,"endColumn":8,"suggestions":"259"},{"ruleId":"229","severity":1,"message":"256","line":1,"column":16,"nodeType":"231","messageId":"232","endLine":1,"endColumn":24},{"ruleId":"229","severity":1,"message":"260","line":1,"column":38,"nodeType":"231","messageId":"232","endLine":1,"endColumn":44},{"ruleId":"229","severity":1,"message":"261","line":43,"column":9,"nodeType":"231","messageId":"232","endLine":43,"endColumn":19},{"ruleId":"229","severity":1,"message":"260","line":1,"column":38,"nodeType":"231","messageId":"232","endLine":1,"endColumn":44},{"ruleId":"229","severity":1,"message":"235","line":4,"column":15,"nodeType":"231","messageId":"232","endLine":4,"endColumn":21},{"ruleId":"229","severity":1,"message":"262","line":5,"column":10,"nodeType":"231","messageId":"232","endLine":5,"endColumn":44},{"ruleId":"229","severity":1,"message":"263","line":1,"column":26,"nodeType":"231","messageId":"232","endLine":1,"endColumn":35},{"ruleId":"229","severity":1,"message":"264","line":17,"column":9,"nodeType":"231","messageId":"232","endLine":17,"endColumn":21},{"ruleId":"229","severity":1,"message":"263","line":1,"column":27,"nodeType":"231","messageId":"232","endLine":1,"endColumn":36},{"ruleId":"229","severity":1,"message":"260","line":1,"column":38,"nodeType":"231","messageId":"232","endLine":1,"endColumn":44},{"ruleId":"229","severity":1,"message":"265","line":7,"column":8,"nodeType":"231","messageId":"232","endLine":7,"endColumn":23},{"ruleId":"229","severity":1,"message":"263","line":1,"column":26,"nodeType":"231","messageId":"232","endLine":1,"endColumn":35},{"ruleId":"229","severity":1,"message":"256","line":1,"column":16,"nodeType":"231","messageId":"232","endLine":1,"endColumn":24},{"ruleId":"229","severity":1,"message":"263","line":1,"column":26,"nodeType":"231","messageId":"232","endLine":1,"endColumn":35},{"ruleId":"229","severity":1,"message":"266","line":2,"column":8,"nodeType":"231","messageId":"232","endLine":2,"endColumn":22},{"ruleId":"229","severity":1,"message":"267","line":9,"column":21,"nodeType":"231","messageId":"232","endLine":9,"endColumn":33},{"ruleId":"229","severity":1,"message":"268","line":13,"column":12,"nodeType":"231","messageId":"232","endLine":13,"endColumn":25},{"ruleId":"229","severity":1,"message":"269","line":35,"column":12,"nodeType":"231","messageId":"232","endLine":35,"endColumn":29},{"ruleId":"229","severity":1,"message":"263","line":1,"column":26,"nodeType":"231","messageId":"232","endLine":1,"endColumn":35},{"ruleId":"238","severity":1,"message":"270","line":10,"column":6,"nodeType":"240","endLine":10,"endColumn":17,"suggestions":"271"},"no-native-reassign",["272"],"no-negated-in-lhs",["273"],"no-unused-vars","'ErrorModal' is defined but never used.","Identifier","unusedVar","'showState' is assigned a value but never used.","'applyType' is assigned a value but never used.","'Howler' is defined but never used.","'room' is assigned a value but never used.","'setStupidHack' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'recipients' and 'stats'. Either include them or remove the dependency array. You can also do a functional update 'setStats(s => ...)' if you only need 'stats' in the 'setStats' call.","ArrayExpression",["274"],"React Hook useEffect has a missing dependency: 'unseenMap'. Either include it or remove the dependency array. You can also do a functional update 'setUnseenMap(u => ...)' if you only need 'unseenMap' in the 'setUnseenMap' call.",["275"],"React Hook useEffect has a missing dependency: 'audioClips'. Either include it or remove the dependency array.",["276"],"'displayTest' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'newName'. Either include it or remove the dependency array.",["277"],"'Backdrop' is defined but never used.","'Dice' is defined but never used.","'DiceRoll' is defined but never used.","'playerIconPreview' is assigned a value but never used.","'setPlayerIconPreview' is assigned a value but never used.","React Hook useEffect contains a call to 'setCorrectName'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [newName] as a second argument to the useEffect Hook.",["278"],"'useState' is defined but never used.","'MessageDropdown' is defined but never used.","React Hook useEffect has a missing dependency: 'setUnreadMessages'. Either include it or remove the dependency array. If 'setUnreadMessages' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["279"],"'useRef' is defined but never used.","'checkState' is assigned a value but never used.","'BsReverseLayoutSidebarInsetReverse' is defined but never used.","'useEffect' is defined but never used.","'showDropDown' is assigned a value but never used.","'MonsterListItem' is defined but never used.","'onClickOutside' is defined but never used.","'setSelection' is assigned a value but never used.","'handleOnClick' is defined but never used.","'isItemInSelection' is defined but never used.","React Hook useEffect has a missing dependency: 'helpTopicHandler'. Either include it or remove the dependency array. If 'helpTopicHandler' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["280"],"no-global-assign","no-unsafe-negation",{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},"Update the dependencies array to be: [ENDPOINT, location.search, recipients, stats]",{"range":"295","text":"296"},"Update the dependencies array to be: [map, unseenMap]",{"range":"297","text":"298"},"Update the dependencies array to be: [messages, unreadMessages, name, audioClips]",{"range":"299","text":"300"},"Update the dependencies array to be: [partyData, name, newName]",{"range":"301","text":"302"},"Add dependencies array: [newName]",{"range":"303","text":"304"},"Update the dependencies array to be: [setUnreadMessages]",{"range":"305","text":"306"},"Update the dependencies array to be: [helpState, helpTopicHandler]",{"range":"307","text":"308"},[4607,4634],"[ENDPOINT, location.search, recipients, stats]",[5277,5282],"[map, unseenMap]",[6597,6629],"[messages, unreadMessages, name, audioClips]",[771,788],"[partyData, name, newName]",[483,483],", [newName]",[613,615],"[setUnreadMessages]",[294,305],"[helpState, helpTopicHandler]"]